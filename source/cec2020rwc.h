#include <math.h>
#include "Eigen/Eigenvalues"
#include "Eigen/Dense"
using namespace Eigen;
using namespace std;

/// C++ implementation of the test suite for the
///     Congress on Evolutionary Computation 2020
///     Competition on Real-World Constrained optimization
/// Author: Vladimir Stanovov (vladimirstanovov@yandex.ru)
///     Reshetnev Siberian State University of Science and Technology
///     Krasnoyarsk, Russian Federation
/// Last change: 16/03/2025
/// Dependencies:
///     C++ Eigen library (version 3.4.0 used during development)
/// Usage:
///     cec20_func(xval,func_num,fval,gval,hval);
///     where:
///         xval - array of input values
///         func_num - number of test function, 1-57
///         fval - here the function value will be written
///         gval - here the inequality constraints values will be written
///         hval - here the equality constraints values will be written+
/// Original matlab code by:
///     Abhishek Kumar (email: abhishek.kumar.eee13@iitbhu.ac.in,
///     Indian Institute of Technology (BHU), Varanasi)
/// Code can be found at https://github.com/P-N-Suganthan/2020-RW-Constrained-Optimisation
///
/// Known issues:
/// RC24: in C++ acos is calculated differently from matlab, resulting in small differences (<1e-10 relative)
/// RC31: should have 0 g's and 0 h's, but it has 1's - probably to avoid empty arrays? Also, it is a box-constrained problem...
/// RC44: g and h should be 91 not 105

#define M_PI       3.14159265358979323846

int global_D[57] = {9,11,7,6,9,38,48,2,3,3,7,7,5,10,7,14,3,4,4,2,5,9,5,7,4,22,10,10,
4,3,4,5,30,118,153,158,126,126,126,76,74,86,86,30,25,25,25,30,30,30,59,59,59,59,64,64,64};
int global_gn[57] = {0,0,14,1,2,0,0,2,1,3,4,9,3,10,11,15,4,4,5,3,8,10,8,7,7,86,3,9,1,8,
1,6,30,0,0,0,0,0,0,0,0,0,0,91,24,24,24,29,29,29,14,14,14,14,0,0,0};
int global_hn[57] = {8,9,0,4,4,32,38,0,1,0,4,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,
0,108,148,148,116,116,116,76,74,76,76,0,1,1,1,1,1,1,1,1,1,1,6,6,6};

double xmin1[9] = {0,0,0,0,1000,0,100,100,100};
double xmax1[9] = {10,200,100,200,2e+06,600,600,600,900};
double xmin2[11] = {10000,10000,10000,0,0,0,100,100,100,100,100};
double xmax2[11] = {819000,1.131e+06,2.05e+06,0.05074,0.05074,0.05074,200,300,300,300,400};
double xmin3[7] = {1000,0,2000,0,0,0,0};
double xmax3[7] = {2000,100,4000,100,100,20,200};
double xmin4[6] = {0,0,0,0,1e-05,1e-05};
double xmax4[6] = {1,1,1,1,16,16};
double xmin5[9] = {-0,-0,-0,-0,-0,-0,-0,-0,-0};
double xmax5[9] = {100,200,100,100,100,100,200,100,200};
double xmin6[38] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
double xmax6[38] = {90,150,90,150,90,90,150,90,90,90,150,150,90,90,150,90,150,90,150,90,1,1.2,1,1,1,0.5,1,1,0.5,0.5,0.5,1.2,0.5,1.2,1.2,0.5,1.2,1.2};
double xmin7[48] = {-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,0.849999,-0,0.849999,-0,0.849999,-0,-0,0.849999,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0};
double xmax7[48] = {35,90,90,140,90,35,35,35,35,35,35,35,90,90,90,35,35,35,35,35,1,1,1,1,30,1,30,1,30,1,1,30,1,1,30,1,30,1,1,1,1,1,1,1,1,1,1,1};
double xmin8[2] = {0,-0.51};
double xmax8[2] = {1.6,1.49};
double xmin9[3] = {0.5,0.5,-0.51};
double xmax9[3] = {1.4,1.4,1.49};
double xmin10[3] = {0.2,-2.22554,-0.51};
double xmax10[3] = {1,-1,1.49};
double xmin11[7] = {0,0,0,0,-0.51,-0.51,0};
double xmax11[7] = {20,20,10,10,1.49,1.49,40};
double xmin12[7] = {0,0,0,-0.51,-0.51,-0.51,-0.51};
double xmax12[7] = {100,100,100,1.49,1.49,1.49,1.49};
double xmin13[5] = {27,27,27,77.51,32.51};
double xmax13[5] = {45,45,45,102.49,45.49};
double xmin14[10] = {0.51,0.51,0.51,250,250,250,6,4,40,10};
double xmax14[10] = {3.49,3.49,3.49,2500,2500,2500,20,16,700,450};
double xmin15[7] = {2.6,0.7,17,7.3,7.3,2.9,5};
double xmax15[7] = {3.6,0.8,28,8.3,8.3,3.9,5.5};
double xmin16[14] = {0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001};
double xmax16[14] = {5,5,5,5,5,5,5,5,5,5,5,5,5,5};
double xmin17[3] = {0.05,0.25,2};
double xmax17[3] = {2,1.3,15};
double xmin18[4] = {0.51,0.51,10,10};
double xmax18[4] = {99.49,99.49,200,200};
double xmin19[4] = {0.125,0.1,0.1,0.1};
double xmax19[4] = {2,10,10,2};
double xmin20[2] = {0,0};
double xmax20[2] = {1,1};
double xmin21[5] = {60,90,1,0,2};
double xmax21[5] = {80,110,3,1000,9};
double xmin22[9] = {16.51,13.51,13.51,16.51,13.51,47.51,0.51,0.51,0.51};
double xmax22[9] = {96.49,54.49,51.49,46.49,51.49,124.49,3.49,6.49,6.49};
double xmin23[5] = {0,0,0,0,0};
double xmax23[5] = {60,60,90,90,90};
double xmin24[7] = {10,10,100,0,10,100,1};
double xmax24[7] = {150,150,200,50,150,300,3.14};
double xmin25[4] = {1,1,1e-06,1};
double xmax25[4] = {16,16,1.6e-05,16};
double xmin26[22] = {6.51,6.51,6.51,6.51,6.51,6.51,6.51,6.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51};
double xmax26[22] = {76.49,76.49,76.49,76.49,76.49,76.49,76.49,76.49,4.49,4.49,4.49,4.49,9.49,9.49,9.49,9.49,9.49,9.49,9.49,9.49,9.49,9.49};
double xmin27[10] = {6.45e-05,6.45e-05,6.45e-05,6.45e-05,6.45e-05,6.45e-05,6.45e-05,6.45e-05,6.45e-05,6.45e-05};
double xmax27[10] = {0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.005};
double xmin28[10] = {125,10.5,4.51,0.515,0.515,0.4,0.6,0.3,0.02,0.6};
double xmax28[10] = {150,31.5,50.49,0.6,0.6,0.5,0.7,0.4,0.1,0.85};
double xmin29[4] = {20,1,20,0.1};
double xmax29[4] = {50,10,50,60};
double xmin30[3] = {0.51,0.6,0.51};
double xmax30[3] = {70.49,3,42.49};
double xmin31[4] = {12,12,12,12};
double xmax31[4] = {60,60,60,60};
double xmin32[5] = {78,33,27,27,27};
double xmax32[5] = {102,45,45,45,45};
double xmin33[30] = {0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001};
double xmax33[30] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
double xmin34[118] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
double xmax34[118] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
double xmin35[153] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
double xmax35[153] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
double xmin36[158] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
double xmax36[158] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
double xmin37[126] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0};
double xmax37[126] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
double xmin38[126] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0};
double xmax38[126] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
double xmin39[126] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0};
double xmax39[126] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
double xmin40[76] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0};
double xmax40[76] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2};
double xmin41[74] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
double xmax41[74] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
double xmin42[86] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0};
double xmax42[86] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,500,500,500,500,500,500,500,500,500,500};
double xmin43[86] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0};
double xmax43[86] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,500,500,500,500,500,500,500,500,500,500};
double xmin44[30] = {40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40};
double xmax44[30] = {1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960,1960};
double xmin45[25] = {-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0};
double xmax45[25] = {90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90};
double xmin46[25] = {-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0};
double xmax46[25] = {90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90};
double xmin47[25] = {-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0};
double xmax47[25] = {90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90};
double xmin48[30] = {-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0};
double xmax48[30] = {90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90};
double xmin49[30] = {-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0};
double xmax49[30] = {90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90};
double xmin50[30] = {-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0};
double xmax50[30] = {90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90};
double xmin51[59] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
double xmax51[59] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};
double xmin52[59] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
double xmax52[59] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};
double xmin53[59] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
double xmax53[59] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};
double xmin54[59] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
double xmax54[59] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};
double xmin55[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
double xmax55[64] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};
double xmin56[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
double xmax56[64] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};
double xmin57[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
double xmax57[64] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};

void get_bounds(int func_num, double* &lowb, double* &upb)
{
    switch(func_num){
    case 1:  {lowb = xmin1; upb = xmax1; break;}
    case 2:  {lowb = xmin2; upb = xmax2; break;}
    case 3:  {lowb = xmin3; upb = xmax3; break;}
    case 4:  {lowb = xmin4; upb = xmax4; break;}
    case 5:  {lowb = xmin5; upb = xmax5; break;}
    case 6:  {lowb = xmin6; upb = xmax6; break;}
    case 7:  {lowb = xmin7; upb = xmax7; break;}
    case 8:  {lowb = xmin8; upb = xmax8; break;}
    case 9:  {lowb = xmin9; upb = xmax9; break;}
    case 10: {lowb = xmin10;upb = xmax10;break;}
    case 11: {lowb = xmin11;upb = xmax11;break;}
    case 12: {lowb = xmin12;upb = xmax12;break;}
    case 13: {lowb = xmin13;upb = xmax13;break;}
    case 14: {lowb = xmin14;upb = xmax14;break;}
    case 15: {lowb = xmin15;upb = xmax15;break;}
    case 16: {lowb = xmin16;upb = xmax16;break;}
    case 17: {lowb = xmin17;upb = xmax17;break;}
    case 18: {lowb = xmin18;upb = xmax18;break;}
    case 19: {lowb = xmin19;upb = xmax19;break;}
    case 20: {lowb = xmin20;upb = xmax20;break;}
    case 21: {lowb = xmin21;upb = xmax21;break;}
    case 22: {lowb = xmin22;upb = xmax22;break;}
    case 23: {lowb = xmin23;upb = xmax23;break;}
    case 24: {lowb = xmin24;upb = xmax24;break;}
    case 25: {lowb = xmin25;upb = xmax25;break;}
    case 26: {lowb = xmin26;upb = xmax26;break;}
    case 27: {lowb = xmin27;upb = xmax27;break;}
    case 28: {lowb = xmin28;upb = xmax28;break;}
    case 29: {lowb = xmin29;upb = xmax29;break;}
    case 30: {lowb = xmin30;upb = xmax30;break;}
    case 31: {lowb = xmin31;upb = xmax31;break;}
    case 32: {lowb = xmin32;upb = xmax32;break;}
    case 33: {lowb = xmin33;upb = xmax33;break;}
    case 34: {lowb = xmin34;upb = xmax34;break;}
    case 35: {lowb = xmin35;upb = xmax35;break;}
    case 36: {lowb = xmin36;upb = xmax36;break;}
    case 37: {lowb = xmin37;upb = xmax37;break;}
    case 38: {lowb = xmin38;upb = xmax38;break;}
    case 39: {lowb = xmin39;upb = xmax39;break;}
    case 40: {lowb = xmin40;upb = xmax40;break;}
    case 41: {lowb = xmin41;upb = xmax41;break;}
    case 42: {lowb = xmin42;upb = xmax42;break;}
    case 43: {lowb = xmin43;upb = xmax43;break;}
    case 44: {lowb = xmin44;upb = xmax44;break;}
    case 45: {lowb = xmin45;upb = xmax45;break;}
    case 46: {lowb = xmin46;upb = xmax46;break;}
    case 47: {lowb = xmin47;upb = xmax47;break;}
    case 48: {lowb = xmin48;upb = xmax48;break;}
    case 49: {lowb = xmin49;upb = xmax49;break;}
    case 50: {lowb = xmin50;upb = xmax50;break;}
    case 51: {lowb = xmin51;upb = xmax51;break;}
    case 52: {lowb = xmin52;upb = xmax52;break;}
    case 53: {lowb = xmin53;upb = xmax53;break;}
    case 54: {lowb = xmin54;upb = xmax54;break;}
    case 55: {lowb = xmin55;upb = xmax55;break;}
    case 56: {lowb = xmin56;upb = xmax56;break;}
    case 57: {lowb = xmin57;upb = xmax57;break;}}
    return;
}
//reading files is slow and boring, let's write constants here ok?
double FunctionPS2_G[38][38] = {   {1.3820502e+03, -1.3820502e+03,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                , {-1.3820502e+03,  2.1534412e+03, -2.5861351e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -5.1277750e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0, -2.5861351e+02,  8.4962936e+02, -3.4837709e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2.4263876e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0, -3.4837709e+02,  6.8294125e+02, -3.3456416e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0, -3.3456416e+02,  4.4692964e+02, -1.1236548e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0, -1.1236548e+02,  8.1210505e+02, -7.1643816e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -6.2809576e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0, -7.1643816e+01,  2.7515172e+02, -2.0350791e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0, -2.0350791e+02,  3.4559691e+02, -1.0193804e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.0150968e+01,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0, -1.0193804e+02,  2.4447234e+02, -1.0238333e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.0150968e+01,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0, -1.0238333e+02,  8.3875637e+02, -7.3637304e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0, -7.3637304e+02,  1.1230683e+03, -3.8669529e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -3.8669529e+02,  4.9441585e+02, -6.7569593e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.0150968e+01,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -6.7569593e+01,  1.7608089e+02, -1.0851130e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.0851130e+02,  2.6015116e+02, -1.5163986e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.5163986e+02,  2.9197391e+02, -1.4033405e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.4033405e+02,  1.8510967e+02, -4.4775620e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.4775620e+01,  1.8063725e+02, -1.3586163e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.3586163e+02,  2.9647840e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.6061677e+02,  0}
                                ,  {0, -5.1277750e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5.7169963e+02, -5.8922130e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -5.8922130e+01,  2.2475485e+02, -1.6583272e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.6583272e+02,  2.4827223e+02, -8.2439504e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -8.2439504e+01,  8.2439504e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0, -2.4263876e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3.5279840e+02, -1.1015965e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.1015965e+02,  2.2132346e+02, -1.1116381e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.1116381e+02,  2.7178058e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.6061677e+02}
                                ,  {0,  0,  0,  0,  0, -6.2809576e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.0767990e+03, -4.4870321e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.4870321e+02,  5.3402551e+02, -8.5322298e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -8.5322298e+01,  1.9886720e+02, -1.1354490e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.1354490e+02,  3.6478320e+02, -2.5123830e+02,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2.5123830e+02,  3.3462145e+02, -8.3383149e+01,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -8.3383149e+01,  3.0273072e+02, -2.1934757e+02,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2.1934757e+02,  3.5717133e+02, -1.3782376e+02,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.3782376e+02,  1.3782376e+02,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0, -4.0150968e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4.0150968e+01,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0, -4.0150968e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4.0150968e+01,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.0150968e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4.0150968e+01,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.6061677e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.6061677e+02,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.6061677e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.6061677e+02}
                                };
double FunctionPS2_B[38][38] =  { {-7.0547162e+02,  7.0547162e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {7.0547162e+02, -1.3263940e+03,  1.3174969e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4.8917266e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  1.3174969e+02, -4.7507259e+02,  1.7747512e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.6584778e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  1.7747512e+02, -3.4792943e+02,  1.7045431e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  1.7045431e+02, -2.6744114e+02,  9.6986834e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  9.6986834e+01, -6.5496629e+02,  2.3796864e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3.2001081e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  2.3796864e+02, -3.0522272e+02,  6.7254080e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  6.7254080e+01, -1.8162853e+02,  7.4223486e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4.0150968e+01,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  7.4223486e+01, -1.8694519e+02,  7.2570741e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4.0150968e+01,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  7.2570741e+01, -3.1622358e+02,  2.4365284e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  2.4365284e+02, -3.7155592e+02,  1.2790308e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.2790308e+02, -2.2121677e+02,  5.3162730e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4.0150968e+01,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5.3162730e+01, -1.9601020e+02,  1.4284747e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.4284747e+02, -2.7779870e+02,  1.3495124e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.3495124e+02, -2.3744613e+02,  1.0249489e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.0249489e+02, -1.6227754e+02,  5.9782650e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5.9782650e+01, -1.6631390e+02,  1.0653125e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.0653125e+02, -2.6714802e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.6061677e+02,  0}
                                ,  {0,  4.8917266e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -5.4226926e+02,  5.3096603e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5.3096603e+01, -2.4682824e+02,  1.9373164e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.9373164e+02, -3.0272959e+02,  1.0899795e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.0899795e+02, -1.0899795e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  1.6584778e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2.5282111e+02,  8.6973328e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8.6973328e+01, -1.7396763e+02,  8.6994299e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8.6994299e+01, -2.4761107e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.6061677e+02}
                                ,  {0,  0,  0,  0,  0,  3.2001081e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -5.4841849e+02,  2.2840768e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2.2840768e+02, -3.0363726e+02,  7.5229578e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7.5229578e+01, -1.7414766e+02,  9.8918085e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9.8918085e+01, -2.2692241e+02,  1.2800433e+02,  0,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.2800433e+02, -2.1041167e+02,  8.2407344e+01,  0,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8.2407344e+01, -3.3806698e+02,  2.5565963e+02,  0,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2.5565963e+02, -4.6995838e+02,  2.1429874e+02,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2.1429874e+02, -2.1429874e+02,  0,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  4.0150968e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.0150968e+01,  0,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  4.0150968e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.0150968e+01,  0,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4.0150968e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.0150968e+01,  0,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.6061677e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.6061677e+02,  0}
                                ,  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.6061677e+02,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.6061677e+02}
                                };
double FunctionPS2_P[38][6] = {{-0, -0, -0, -0,  1, -0}
                            ,  {1.0000000e-01, -0, -0, -0,  1,  9.2000000e-01}
                            ,  {9.0000000e-02, -0, -0, -0,  1,  1.8000000e-01}
                            ,  {1.2000000e-01, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  9.2000000e-01}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  1.8000000e-01}
                            ,  {2.0000000e-01, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {2.0000000e-01, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  1.8000000e-01}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {4.5000000e-02, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  9.2000000e-01}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {1.2000000e-01, -0, -0, -0,  1,  9.2000000e-01}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  1.8000000e-01}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {9.0000000e-02, -0, -0, -0,  1,  1.8000000e-01}
                            ,  {9.0000000e-02, -0, -0, -0,  1,  9.2000000e-01}
                            ,  {9.0000000e-02, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {9.0000000e-02, -0, -0, -0,  1,  1.8000000e-01}
                            ,  {9.0000000e-02, -0, -0, -0,  1,  9.2000000e-01}
                            ,  {9.0000000e-02, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {4.2000000e-01, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {4.2000000e-01, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  1.8000000e-01}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {1.2000000e-01, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {2.0000000e-01, -0, -0, -0,  1,  1.5100000e+00}
                            ,  {1.5000000e-01, -0, -0, -0,  1,  9.2000000e-01}
                            ,  {2.1000000e-01, -0, -0, -0,  1,  9.2000000e-01}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  1.5100000e+00}
                            , {-0, -0, -0, -0,  1, -0}
                            , {-0, -0, -0, -0,  1, -0}
                            , {-0, -0, -0, -0,  1, -0}
                            , {-0, -0, -0, -0,  1, -0}
                            , {-0, -0, -0, -0,  1, -0}
                            };
double FunctionPS2_Q[38][6] = {{-0, -0, -0, -0,  1, -0}
                            ,  {6.0000000e-02, -0, -0, -0,  1,  4.0400000e+00}
                            ,  {4.0000000e-02, -0, -0, -0,  1,  6.0000000e+00}
                            ,  {8.0000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {3.0000000e-02, -0, -0, -0,  1,  4.0400000e+00}
                            ,  {2.0000000e-02, -0, -0, -0,  1,  6.0000000e+00}
                            ,  {1.0000000e-01, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {1.0000000e-01, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {2.0000000e-02, -0, -0, -0,  1,  6.0000000e+00}
                            ,  {2.0000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {3.0000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {3.5000000e-02, -0, -0, -0,  1,  4.0400000e+00}
                            ,  {3.5000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {8.0000000e-02, -0, -0, -0,  1,  4.0400000e+00}
                            ,  {1.0000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {2.0000000e-02, -0, -0, -0,  1,  6.0000000e+00}
                            ,  {2.0000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {4.0000000e-02, -0, -0, -0,  1,  6.0000000e+00}
                            ,  {4.0000000e-02, -0, -0, -0,  1,  4.0400000e+00}
                            ,  {4.0000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {4.0000000e-02, -0, -0, -0,  1,  6.0000000e+00}
                            ,  {4.0000000e-02, -0, -0, -0,  1,  4.0400000e+00}
                            ,  {5.0000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {2.0000000e-01, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {2.0000000e-01, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {2.5000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {2.5000000e-02, -0, -0, -0,  1,  6.0000000e+00}
                            ,  {2.0000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {7.0000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {6.0000000e-01, -0, -0, -0,  1,  3.4000000e+00}
                            ,  {7.0000000e-02, -0, -0, -0,  1,  4.0400000e+00}
                            ,  {1.0000000e-01, -0, -0, -0,  1,  4.0400000e+00}
                            ,  {4.0000000e-02, -0, -0, -0,  1,  3.4000000e+00}
                            , {-0, -0, -0, -0,  1, -0}
                            , {-0, -0, -0, -0,  1, -0}
                            , {-0, -0, -0, -0,  1, -0}
                            , {-0, -0, -0, -0,  1, -0}
                            , {-0, -0, -0, -0,  1, -0}
                            };
double FunctionPS11_G[30][30] = {{6.2953368, -5, -1.2953368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {-5, 9.6892911, 0, -1.8461538, -1.1764706, -1.6666667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {-1.2953368, 0, 7.1776897, -5.8823529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, -1.8461538, -5.8823529, 13.61086, 0, -5.8823529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, -1.1764706, 0, 0, 4.1350505, 0, -2.9585799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, -1.6666667, 0, -5.8823529, 0, 22.540962, -4.109589, -5.8823529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0},
                                {0, 0, 0, 0, -2.9585799, -4.109589, 7.0681689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, -5.8823529, 0, 7.2584997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.3761468, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 13.560885, 0, 0, 0, 0, 0, 0, -4.109589, 0, 0, -1.7241379, -5.1724138, -2.5547445, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.5455257, 0, -1.4634146, -3.2110092, -1.8711019, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4634146, 0, 3.9521024, -2.4886878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.2110092, 0, -2.4886878, 9.5178788, 0, 0, -1.8181818, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.8711019, 0, 0, 0, 3.7534548, -1.8823529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, -4.109589, 0, 0, 0, 0, 0, -1.8823529, 5.991942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.8181818, 0, 0, 4.7450111, -2.9268293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.9268293, 8.0992431, -5.1724138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, -1.7241379, 0, 0, 0, 0, 0, 0, 0, 0, -5.1724138, 6.8965517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, -5.1724138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25.172414, -20, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, -2.5547445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 25.118847, 0, -2.5641026, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 3.4476615, -1.4476615, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.5641026, -1.4476615, 5.3221089, -1.3103448, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.3103448, 4.4759534, -1.2083132, -1.9572954, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.2083132, 1.2083132, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.9572954, 0, 3.6279846, 0, -0.97864769, -0.69204152},
                                {0, 0, 0, 0, 0, -5, 0, -1.3761468, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.3761468, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.97864769, 0, 1.9013697, -0.92272203},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.69204152, 0, -0.92272203, 1.6147636}};
double FunctionPS11_B[30][30] = {{-19.89728, 15, 4.9222798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {15, -29.891652, 0, 5.2307692, 4.7058824, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {4.9222798, 0, -28.441692, 23.529412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 5.2307692, 23.529412, -56.125747, 0, 23.529412, 0, 0, 0, 0, 0, 3.8461538, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 4.7058824, 0, 0, -11.789574, 0, 7.1005917, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 5, 0, 23.529412, 0, -84.545347, 10.958904, 23.529412, 4.7619048, 1.7857143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0},
                                {0, 0, 0, 0, 7.1005917, 10.958904, -18.049496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 23.529412, 0, -28.106568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.587156, 0, 0},
                                {0, 0, 0, 0, 0, 4.7619048, 0, 0, -18.614719, 9.0909091, 4.7619048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 1.7857143, 0, 0, 9.0909091, -43.401934, 0, 0, 0, 0, 0, 0, 10.958904, 0, 0, 4.0229885, 12.068966, 5.4744526, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 4.7619048, 0, -4.7619048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 3.8461538, 0, 0, 0, 0, 0, 0, 0, -24.28105, 7.1428571, 3.1707317, 5.9633028, 4.1580042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.1428571, -7.1428571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.1707317, 0, -5.4331751, 2.2624434, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.9633028, 0, 2.2624434, -15.86211, 0, 0, 3.6363636, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.1580042, 0, 0, 0, -8.6285924, 4.4705882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 10.958904, 0, 0, 0, 0, 0, 4.4705882, -15.429492, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.6363636, 0, 0, -9.9778271, 6.3414634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.3414634, -18.410429, 12.068966, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 4.0229885, 0, 0, 0, 0, 0, 0, 0, 0, 12.068966, -16.091954, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 12.068966, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52.068966, 40, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 5.4744526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, -49.320606, 0, 3.8461538, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, -7.0066815, 3.0066815, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.8461538, 3.0066815, -9.1282974, 2.2758621, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.2758621, -7.8491529, 1.8366361, 3.7366548, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.8366361, -1.8366361, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.7366548, 0, -9.4025601, 2.5, 1.8683274, 1.2975779},
                                {0, 0, 0, 0, 0, 15, 0, 4.587156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.5, -22.072156, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.8683274, 0, -3.5984312, 1.7301038},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.2975779, 0, 1.7301038, -3.0276817}};
double FunctionPS11_P[30] = {0, 0.217, 0.024, 0.076, 0, 0, 0.228, 0.3, 0, 0.058, 0, 0.112, 0, 0.062, 0.082, 0.035, 0.09, 0.032, 0.095, 0.022, 0.175, 0, 0.032, 0.087, 0, 0.035, 0, 0, 0.024, 0.106};
double FunctionPS11_Q[30] = {0, 0.127, 0.012, 0.016, 0, 0, 0.109, 0.3, 0, 0.02, 0, 0.075, 0, 0.016, 0.025, 0.018, 0.058, 0.009, 0.034, 0.007, 0.112, 0, 0.016, 0.067, 0, 0.023, 0, 0, 0.009, 0.019};

double FunctionPS14_L[37][6] = {{1, 2, 0.000574, 0.000293, 0, 1},
                            {2, 3, 0.00307, 0.001564, 0, 1},
                            {3, 4, 0.002279, 0.001161, 0, 1},
                            {4, 5, 0.002373, 0.001209, 0, 1},
                            {5, 6, 0.0051, 0.004402, 0, 1},
                            {6, 7, 0.00116, 0.003853, 0, 1},
                            {7, 8, 0.00443, 0.001464, 0, 1},
                            {8, 9, 0.006411, 0.004668, 0, 1},
                            {9, 10, 0.006501, 0.004608, 0, 1},
                            {10, 11, 0.001224, 0.000405, 0, 1},
                            {11, 12, 0.002331, 0.000771, 0, 1},
                            {12, 13, 0.009141, 0.007192, 0, 1},
                            {13, 14, 0.003372, 0.004439, 0, 1},
                            {14, 15, 0.00368, 0.003275, 0, 1},
                            {15, 16, 0.004647, 0.003394, 0, 1},
                            {16, 17, 0.008026, 0.010716, 0, 1},
                            {17, 18, 0.004558, 0.003574, 0, 1},
                            {2, 19, 0.001021, 0.000974, 0, 1},
                            {19, 20, 0.009366, 0.00844, 0, 1},
                            {20, 21, 0.00255, 0.002979, 0, 1},
                            {21, 22, 0.004414, 0.005836, 0, 1},
                            {3, 23, 0.002809, 0.00192, 0, 1},
                            {23, 24, 0.005592, 0.004415, 0, 1},
                            {24, 25, 0.005579, 0.004366, 0, 1},
                            {6, 26, 0.001264, 0.000644, 0, 1},
                            {26, 27, 0.00177, 0.000901, 0, 1},
                            {27, 28, 0.006594, 0.005814, 0, 1},
                            {28, 29, 0.005007, 0.004362, 0, 1},
                            {29, 30, 0.00316, 0.00161, 0, 1},
                            {30, 31, 0.006067, 0.005996, 0, 1},
                            {31, 32, 0.001933, 0.002253, 0, 1},
                            {32, 33, 0.002123, 0.003301, 0, 1},
                            {8, 34, 0.012453, 0.012453, 0, 1},
                            {9, 35, 0.012453, 0.012453, 0, 1},
                            {12, 36, 0.012453, 0.012453, 0, 1},
                            {18, 37, 0.003113, 0.003113, 0, 1},
                            {25, 38, 0.003113, 0.003113, 0, 1}};
double FunctionRM_feed[7][59] = {{200, 150, 400, 350, 150, 150, 170, 600, 400, 200, 500, 200, 200, 150, 450, 150, 140, 70, 30, 30, 70, 100, 90, 70, 250, 90, 70, 100, 250, 250, 70, 50, 110, 500, 400, 300, 400, 600, 300, 600, 500, 400, 300, 420, 500, 600, 500, 300, 500, 500, 312, 1000, 600, 1200, 850, 50, 2000, 880, 250},
                                {0.6, 0.912, 0.8991, 0.9177, 0.876, 0.367, 0.291, 0.9066, 0.8811, 0.296, 0.8956, 0.894, 0.2248, 0.8556, 0.9011, 0.6, 0.329, 0.1298, 0.0601, 0.3792, 0.2624, 0.3749, 0.402, 0.4422, 0.6238, 0.4, 0.1972, 0.2085, 0.8825, 0.8996, 0.25, 0.175, 0.5962, 0.87, 0.8898, 0.9228, 0.6437, 0.8812, 0.9043, 0.8995, 0.8888, 0.8938, 0.9139, 0.88, 0.8752, 0.8906, 0.8826, 0.8778, 0.8379, 0.8618, 0.8731, 0.9207, 0.95, 0.865, 0.976, 0.976, 0.95, 0.99, 0.95},
                                {0.4, 0.088, 0.1009, 0.0823, 0.124, 0.633, 0.709, 0.0934, 0.1189, 0.704, 0.1044, 0.1066, 0.7752, 0.1444, 0.0989, 0.4, 0.671, 0.8702, 0.9399, 0.6208, 0.7376, 0.6251, 0.598, 0.5578, 0.3762, 0.6, 0.8028, 0.7915, 0.1175, 0.1004, 0.75, 0.825, 0.4038, 0.13, 0.1102, 0.0772, 0.3563, 0.1188, 0.0957, 0.1005, 0.1112, 0.1062, 0.0861, 0.12, 0.1248, 0.1094, 0.1174, 0.1222, 0.1621, 0.1382, 0.1269, 0.0793, 0.05, 0.135, 0.024, 0.024, 0.05, 0.01, 0.05},
                                {0.294, 0.4782, 0.5596, 0.4193, 0.4112, 0.2239, 0.1746, 0.5259, 0.5022, 0.1597, 0.5105, 0.2748, 0.1439, 0.3606, 0.5497, 0.366, 0.2007, 0.1084, 0.0474, 0.228, 0.1863, 0.1725, 0.1849, 0.2211, 0.5053, 0.324, 0.1597, 0.1585, 0.7678, 0.865, 0.1263, 0.1273, 0.3756, 0.72, 0.7, 0.73, 0.48, 0.76, 0.57, 0.85, 0.74, 0.61, 0.4, 0.72, 0.74, 0.85, 0.74, 0.65, 0.72, 0.78, 0.78, 0.7716, 0, 0, 0, 0, 0, 0, 0},
                                {0.0249, 0.0406, 0.1246, 0.0454, 0.051, 0.0338, 0.0185, 0.1604, 0.0461, 0.024, 0.079, 0.0477, 0.0262, 0.0483, 0.0856, 0.1402, 0.0769, 0.0112, 0.0035, 0.0176, 0.0555, 0.0409, 0.0532, 0.0414, 0.217, 0.0945, 0.0466, 0.0083, 0.1308, 0.1266, 0.0866, 0.0666, 0.0346, 0.12, 0.09, 0.2, 0.05, 0.46, 0.09, 0.3, 0.28, 0.36, 0.08, 0.14, 0.11, 0.09, 0.11, 0.15, 0.09, 0.07, 0.07, 0.443, 2.81, 0.1394, 0, 0, 0, 0, 0},
                                {0.0023, 0.003, 0.002, 0.0028, 0.0035, 0.0027, 0.0024, 0.0126, 0.0023, 0.0052, 0.0012, 0.004, 0.0002, 0.0108, 0.0048, 0.0106, 0.0058, 0.0002, 0.0026, 0.0001, 0.0006, 0.0081, 0.007, 0.012, 0.0015, 0.0034, 0.0017, 0.0008, 0.0008, 0.0003, 0.0001, 0.0002, 0.0064, 0.0018, 0.0011, 0.0013, 0.0036, 0.0035, 0.0053, 0.0028, 0.0014, 0.0021, 0.0044, 0.006, 0.0006, 0.0036, 0.0005, 0.001, 0.0006, 0.0002, 0.0007, 0.0013, 0, 0.0003, 0.31, 0.37, 0, 0, 0},
                                {0.0012, 0.0002, 0.0028, 0.0013, 0.001, 0.0007, 0.0016, 0.0027, 0.0021, 0.0031, 0.0013, 0.0011, 0.0006, 0.0012, 0.003, 0.0062, 0.0034, 0.0002, 0.0001, 0.001, 0.001, 0.0016, 0.0007, 0.0034, 0.0018, 0.0016, 0.0008, 0.0001, 0.0186, 0.0013, 0.0001, 0.0004, 0.0015, 0.0018, 0.003, 0.0076, 0.0003, 0.0064, 0.0009, 0.0036, 0.0055, 0.0095, 0.0025, 0.004, 0.0033, 0.0003, 0.0031, 0.0095, 0.004, 0.0009, 0.0026, 0.0146, 0, 0.0013, 0.18, 0, 0, 0, 0}};

double FunctionRM_diary[14][64] = {{300, 150, 350, 400, 50, 400, 500, 400, 380, 2000, 1200, 390, 400, 450, 150, 500, 600, 350, 350, 1100, 390, 40, 250, 130, 120, 110, 400, 100, 300, 250, 250, 400, 160, 10, 420, 55, 60, 50, 60, 55, 350, 350, 500, 520, 200, 359, 700, 30, 100, 500, 560, 60, 400, 300, 700, 900, 350, 400, 150, 380, 480, 360, 500, 550},
                                {0.0047, 0.0067, 0.0177, 0.0065, 0.0065, 0.0191, 0.0188, 0.0047, 0.0075, 0, 0.0111, 0.0081, 0.0112, 0.0112, 0, 0.0212, 0.022, 0.0138, 0.0107, 0, 0.0098, 0.0173, 0.0076, 0.008, 0.008, 0.008, 0.0067, 0.0067, 0.0067, 0.0067, 0.0067, 0.0067, 0.0067, 0.007, 0.0067, 0.0067, 0.0067, 0.0067, 0.007, 0.007, 0.0067, 0.0067, 0.0067, 0.0073, 0.0073, 0.0073, 0, 0, 0, 0, 0, 0.017, 0.0126, 0.0209, 0.0209, 0.0063, 0.0099, 0.012, 0.012, 0.0195, 0.0101, 0.011, 0.0101, 0.0083},
                                {0.0454, 0.0283, 0.0317, 0.03, 0.03, 0.0505, 0.0431, 0.0454, 0.0367, 0, 0.0577, 0.0307, 0.0165, 0.0165, 0, 0.0202, 0.043, 0.0347, 0.0317, 0, 0.03, 0.0365, 0.0114, 0.0213, 0.0213, 0.0213, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0443, 0.0283, 0.0283, 0.0283, 0.0283, 0.0443, 0.0443, 0.0283, 0.0283, 0.0283, 0.0602, 0.0602, 0.0602, 0, 0, 0, 0, 0, 0.0323, 0.0215, 0.0124, 0.0124, 0.0385, 0.045, 0.0206, 0.0206, 0.0431, 0.0706, 0.0314, 0.0536, 0.0608},
                                {0.0472, 0.0283, 0.0477, 0.0443, 0.0443, 0.1181, 0.0701, 0.0472, 0.0776, 0, 0.0642, 0.0483, 0.0182, 0.0182, 0, 0.0438, 0.074, 0.0442, 0.0344, 0, 0.0433, 0.0173, 0.019, 0.0187, 0.0187, 0.0187, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0461, 0.0283, 0.0283, 0.0283, 0.0283, 0.0461, 0.0461, 0.0283, 0.0283, 0.0283, 0.0639, 0.0639, 0.0639, 0, 0, 0, 0, 0, 0.0469, 0.0261, 0.0317, 0.0317, 0.104, 0.1059, 0.0415, 0.0415, 0.107, 0.0937, 0.1088, 0.0655, 0.0769},
                                {0.0274, 0.0283, 0.0495, 0.0317, 0.0317, 0.0414, 0.035, 0.0274, 0.0371, 0, 0.0356, 0.0315, 0.028, 0.028, 0, 0.0216, 0.036, 0.0297, 0.0294, 0, 0.0282, 0.0394, 0.0342, 0.0213, 0.0213, 0.0213, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0392, 0.0283, 0.0283, 0.0283, 0.0283, 0.0392, 0.0392, 0.0283, 0.0283, 0.0283, 0.05, 0.05, 0.05, 0, 0, 0, 0, 0, 0.0343, 0.0276, 0.0293, 0.0293, 0.0345, 0.0339, 0.0312, 0.0312, 0.0422, 0.0353, 0.0253, 0.0352, 0.0303},
                                {0.0486, 0.0549, 0.0747, 0.0461, 0.0461, 0.0667, 0.0664, 0.0486, 0.0656, 0, 0.0715, 0.0683, 0.1073, 0.1073, 0, 0.077, 0.074, 0.058, 0.1282, 0, 0.1364, 0.0635, 0.144, 0.064, 0.064, 0.064, 0.0549, 0.0549, 0.0549, 0.0549, 0.0549, 0.0549, 0.0549, 0.0738, 0.0549, 0.0549, 0.0549, 0.0549, 0.0738, 0.0738, 0.0549, 0.0549, 0.0549, 0.0926, 0.0926, 0.0926, 0, 0, 0, 0, 0, 0.0918, 0.0846, 0.1622, 0.1622, 0.0633, 0.0631, 0.0907, 0.0907, 0.068, 0.0693, 0.0606, 0.0723, 0.0613},
                                {0.0246, 0.0283, 0.0457, 0.0269, 0.0269, 0.0434, 0.0328, 0.0246, 0.0368, 0, 0.0461, 0.0392, 0.0269, 0.0269, 0, 0.0384, 0.037, 0.0384, 0.0423, 0, 0.0398, 0.0365, 0.0342, 0.024, 0.024, 0.024, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0283, 0.0442, 0.0283, 0.0283, 0.0283, 0.0283, 0.0442, 0.0442, 0.0283, 0.0283, 0.0283, 0.0601, 0.0601, 0.0601, 0, 0, 0, 0, 0, 0.0571, 0.0353, 0.0434, 0.0434, 0.0377, 0.0362, 0.0278, 0.0278, 0.0537, 0.0408, 0.0316, 0.0465, 0.0425},
                                {0.033, 0.0383, 0.043, 0.045, 0.045, 0.0549, 0.0496, 0.033, 0.054, 0, 0.0491, 0.0488, 0.0375, 0.0375, 0, 0, 0.054, 0.0464, 0.0487, 0, 0.045, 0.0548, 0.0456, 0.032, 0.032, 0.032, 0.0383, 0.0383, 0.0383, 0.0383, 0.0383, 0.0383, 0.0383, 0.0549, 0.0383, 0.0383, 0.0383, 0.0383, 0.0549, 0.0549, 0.0383, 0.0383, 0.0383, 0.0714, 0.0714, 0.0714, 0, 0, 0, 0, 0, 0.0595, 0.0378, 0.0504, 0.0504, 0.0527, 0.0502, 0.0524, 0.0524, 0.0576, 0.0462, 0.0382, 0.0509, 0.0379},
                                {0.0184, 0.01, 0.013, 0.0187, 0.0187, 0.024, 0.0255, 0.0184, 0.0296, 0, 0.0296, 0.0229, 0.0206, 0.0206, 0, 0.018, 0.026, 0.021, 0.0206, 0, 0.0223, 0.0183, 0.0266, 0.0107, 0.0107, 0.0107, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.0181, 0.0181, 0.01, 0.01, 0.01, 0.0262, 0.02, 0.0262, 0, 0, 0, 0, 0, 0.019, 0.0147, 0.0245, 0.0245, 0.0314, 0.0345, 0.0182, 0.0182, 0.0252, 0.0248, 0.0218, 0.0282, 0.0227},
                                {0.0299, 0.035, 0.041, 0.028, 0.028, 0.0659, 0.0438, 0.0299, 0.0453, 0, 0.0481, 0.056, 0.0365, 0.0365, 0, 0.0586, 0.048, 0.0464, 0.0495, 0, 0.0484, 0.0394, 0.049, 0.0294, 0.0294, 0.0294, 0.035, 0.035, 0.035, 0.035, 0.035, 0.035, 0.035, 0.0491, 0.035, 0.035, 0.035, 0.035, 0.0491, 0.0491, 0.035, 0.035, 0.035, 0.0632, 0.0632, 0.0632, 0, 0, 0, 0, 0, 0.0531, 0.048, 0.0648, 0.0648, 0.0585, 0.0547, 0.042, 0.042, 0.0525, 0.0462, 0.0492, 0.0494, 0.0388},
                                {0.0164, 0.045, 0.01, 0.011, 0.011, 0.003, 0.0088, 0.0053, 0.012, 0, 0.0164, 0.0126, 0.0037, 0.0037, 0, 0.0128, 0.01, 0.0094, 0.0075, 0, 0.0106, 0.0135, 0.0038, 0.0011, 0.0011, 0.0011, 0.045, 0.045, 0.045, 0.045, 0.045, 0.045, 0.045, 0.0265, 0.045, 0.045, 0.045, 0.045, 0.0312, 0.0312, 0.045, 0.045, 0.045, 0.0184, 0.0184, 0.0184, 0, 0, 0, 0, 0, 0.0136, 0.0112, 0.0037, 0.0037, 0.0174, 0.0174, 0.0164, 0.0164, 0.0163, 0.0076, 0.0098, 0.0164, 0.0164},
                                {0, 2.49, 3.22, 2.68, 0, 0, 2.53, 2.89, 0, 0, 3.22, 3.04, 3.18, 3.36, 2.17, 2.64, 2.86, 3.04, 2.75, 3.62, 3.07, 2.35, 1.81, 0, 2.39, 2.84, 2.21, 2.06, 1.63, 1.59, 1.45, 2.1, 0, 0, 1.95, 1.92, 2.68, 2.42, 0, 0, 2.31, 2.03, 2.13, 1.88, 0, 2.13, 0, 0, 0, 0, 0, 2.53, 2.42, 3, 3.22, 3.44, 2.71, 3.11, 3.25, 3.22, 2.82, 3, 3.04, 3.15},
                                {0.0022, 0.0023, 0.0015, 0.0068, 0.0143, 0.0015, 0.0008, 0.0053, 0.0013, 0.12, 0.0027, 0.0005, 0.0003, 0.0003, 0.01, 0.0007, 0.0007, 0.0007, 0.0005, 0.0057, 0.0007, 0.0052, 0.0012, 0.0023, 0.0031, 0.0031, 0.0032, 0.0058, 0.0023, 0.0017, 0.003, 0.0043, 0.0031, 0.013, 0.0026, 0.0055, 0.0027, 0.0029, 0, 0, 0.0065, 0.0051, 0.0051, 0.0119, 0.0174, 0.0138, 0.22, 0.34, 0.38, 0.32, 0.0015, 0.0029, 0.0029, 0.0007, 0.0007, 0.0016, 0.002, 0.0026, 0.0032, 0.0043, 0.0026, 0.0032, 0.004, 0.0029},
                                {0.0008, 0.0011, 0.0024, 0.001, 0.0011, 0.0009, 0.0173, 0.0018, 0.0138, 0, 0.0065, 0.0035, 0.0032, 0.0031, 0.001, 0.003, 0.0036, 0.0036, 0.0034, 0.0006, 0.0033, 0.0029, 0.0004, 0.0021, 0.0027, 0.0027, 0.0025, 0.0031, 0.0006, 0.0005, 0.0007, 0.0032, 0.0014, 0.0036, 0.003, 0.0045, 0.0034, 0.0028, 0, 0, 0.0032, 0.0031, 0.0029, 0.0024, 0.0027, 0.0025, 0.193, 0.0002, 0.0007, 0.18, 0, 0.007, 0.007, 0.0095, 0.0061, 0.0062, 0.0116, 0.0083, 0.014, 0.0089, 0.0044, 0.0066, 0.0071, 0.0071}};

double fastpow(double x, int p)
{
    double res = 1;
    for(int i=0;i!=p;i++)
        res *= x;
    return res;
}

complex<double> acos_fixed(complex<double> x)
{
    double res_r;
    complex<double> res;
    if(abs(x) > 1 || x.imag() != 0)
    {
        if(x.real() == abs(x))
            res = abs(acos(x))*1i;
        else
            res = acos(x);
        return res;
    }
    else
    {
        res_r = acos(x.real());
        res = res_r;
        return res;
    }

}

complex<double> fxz_obj11(double* x, complex<double> z, int n)
{
    complex<double> a = x[0];
    complex<double> b = x[1];
    complex<double> c = x[2];
    complex<double> e = x[3];
    complex<double> l = x[5];
    complex<double> P = 100;
    complex<double> g = sqrt(e*e+(z-l)*(z-l));
    complex<double> phi = atan(e/(l-z));
    complex<double> alpha = acos_fixed((a*a+g*g-b*b)/(2.*a*g))+phi;
    complex<double> alpha_ = acos_fixed((a*a+g*g-b*b)/(2.*a*g));
    complex<double> beta_ = acos_fixed((b*b+g*g-a*a)/(2.*b*g));
    complex<double> res = P*b*sin(alpha_+beta_)/(2.*c*cos(alpha));
    if(n == 1)
        return res;
    else
        return -res;
}

complex<double> sign_matlab(complex<double> x)
{
    complex<double> res;
    double x_abs = abs(x);
    double res_real = x.real() / x_abs;
    double res_imag = x.imag() / x_abs;
    res = res_real + 1i*res_imag;
    return res;
}

complex<double> fminbnd_m(double* x1, double e1, double a1, double b1, int n)
{// a clumsy copy of Matlab's fminbnd
    complex<double> tol = e1;
    complex<double> eps = 2.220446049250313e-16;
    complex<double> seps = sqrt(eps);
    complex<double> c = 0.5*(3.0 - sqrt(5.0));
    complex<double> a = a1;
    complex<double> b = b1;
    complex<double> v = a + c*(b-a);
    complex<double> w = v;
    complex<double> xf = v;
    complex<double> d = 0.0;
    complex<double> e = 0.0;
    complex<double> x = xf;
    complex<double> tmp = fxz_obj11(x1,x,n);
    complex<double> fx = tmp;
    int funccount = 1;
    int iter = 0;
    int maxfun = 500;
    int maxiter = 500;
    complex<double> fv = fx;
    complex<double> fw = fx;
    complex<double> xm = 0.5*(a+b);
    complex<double> tol1 = seps*fabs(xf) + tol/3.0;
    complex<double> tol2 = 2.0*tol1;
    complex<double> r;
    complex<double> q;
    complex<double> p;
    while( fabs(xf - xm) > (tol2 - 0.5*(b-a)).real() )
    {
        int gs = 1;
        if(fabs(e) > tol1.real())
        {
            gs = 0;
            r = (xf-w)*(fx-fv);
            q = (xf-v)*(fx-fw);
            p = (xf-v)*q-(xf-w)*r;
            q = 2.0*(q-r);
            if(q.real() > 0.0)
                p = -p;
            q = fabs(q);
            r = e;
            e = d;

            if( (fabs(p)<fabs(0.5*q*r)) && (p.real()>(q*(a-xf)).real()) && (p.real()<(q*(b-xf)).real()) )
            {
                d = p / q;
                x = xf + d;
                if( ((x-a).real() < (tol2.real())) || ((b-x).real() < (tol2.real()) ) )
                {
                    complex<double> si = (xm-xf)/fabs(xm-xf) + double((xm-xf).real()==0);
                    d = tol1*si;
                }
            }
            else
            {
                gs = 1;
            }
        }
        if(gs == 1)
        {
            if((xf.real()) >= (xm.real()))
                e = a - xf;
            else
                e = b - xf;
            d = c*e;
        }
        complex<double> si;
        si = sign_matlab(d);
        si = si + double(abs(d) == 0);
        x = xf + si*max(fabs(d),(tol1.real()));
        complex<double> tmp = fxz_obj11(x1,x,n);
        complex<double> fu = tmp.real() + tmp.imag()*1i;
        funccount ++;

        if((fu.real()) <= (fx.real()))
        {
            if((x.real()) >= (xf.real()))
                a = xf;
            else
                b = xf;

            v = w;
            fv = fw;
            w = xf;
            fw = fx;
            xf = x;
            fx = fu;
        }
        else
        {
            if((x.real()) < (xf.real()))
                a = x;
            else
                b = x;

            if ( ((fu.real()) <= (fw.real())) || (w == xf) )
            {
                v = w;
                fv = fw;
                w = x;
                fw = fu;
            }
            else if ( ((fu.real()) <= (fv.real())) || (v == xf) || (v == w) )
            {
                v = x;
                fv = fu;
            }
        }
        xm = 0.5*(a+b);
        tol1 = seps*fabs(xf) + tol/3.0;
        tol2 = 2.0*tol1;

        if( funccount >= maxfun || iter >= maxiter )
            break;
    }
    return fx;
}

complex<double> OBJ11(double* x, int n)
{
    complex<double> res;
    double Zmax = 99.9999;
    res = fminbnd_m(x, 1e-4, 0, Zmax, n);
    return res;
}

void cec20_func(double* xval, int func_num, double* fval, double* gval, double* hval)
{
    switch(func_num)
    {
    case 1:
        {
            fval[0] = 35*pow(xval[0],0.6)+35*pow(xval[1],0.6);
            hval[0] = 200*xval[0]*xval[3]-xval[2];
            hval[1] = 200*xval[1]*xval[5]-xval[4];
            hval[2] = xval[2] - 10000*(xval[6]-100);
            hval[3] = xval[4] - 10000*(300-xval[6]);
            hval[4] = xval[2] - 10000*(600-xval[7]);
            hval[5] = xval[4] - 10000*(900-xval[8]);
            hval[6] = xval[3]*log(abs(xval[7]-100)+1e-8)-xval[3]*log((600-xval[6])+1e-8)-xval[7]+xval[6]+500;
            hval[7] = xval[5]*log(abs(xval[8]-xval[6])+1e-8)-xval[5]*log(600)-xval[8]+xval[6]+600;
            break;
        }
    case 2:
        {
            fval[0] = pow((xval[0]/(120*xval[3])),0.6)+pow((xval[1]/(80*xval[4])),0.6)+pow((xval[2]/(40*xval[5])),0.6);
            hval[0] = xval[0]-1e4*(xval[6]-100);
            hval[1] = xval[1]-1e4*(xval[7]-xval[6]);
            hval[2] = xval[2]-1e4*(500-xval[7]);
            hval[3] = xval[0]-1e4*(300-xval[8]);
            hval[4] = xval[1]-1e4*(400-xval[9]);
            hval[5] = xval[2]-1e4*(600-xval[10]);
            hval[6] = xval[3]*log(abs(xval[8]-100)+1e-8)-xval[3]*log(300-xval[6]+1e-8)-xval[8]-xval[6]+400;
            hval[7] = xval[4]*log(abs(xval[9]-xval[6])+1e-8)-xval[4]*log(abs(400-xval[7])+1e-8)-xval[9]+xval[6]-xval[7]+400;
            hval[8] = xval[5]*log(abs(xval[10]-xval[7])+1e-8)-xval[5]*log(100)-xval[10]+xval[7]+100;
            break;
        }
    case 3:
        {
            fval[0] = -1.715*xval[0]-0.035*xval[0]*xval[5]-4.0565*xval[2]-10.0*xval[1]+0.063*xval[2]*xval[4];
            gval[0] = 0.0059553571*xval[5]*xval[5]*xval[0]+0.88392857*xval[2]-0.1175625*xval[5]*xval[0]-xval[0];
            gval[1] = 1.1088*xval[0]+0.1303533*xval[0]*xval[5]-0.0066033*xval[0]*xval[5]*xval[5]-xval[2];
            gval[2] = 6.66173269*xval[5]*xval[5]+172.39878*xval[4]-56.596669*xval[3]-191.20592*xval[5]-10000;
            gval[3] = 1.08702*xval[5]+0.32175*xval[3]-0.03762*xval[5]*xval[5]-xval[4]+56.85075;
            gval[4] = 0.006198*xval[6]*xval[3]*xval[2]+2462.3121*xval[1]-25.125634*xval[1]*xval[3]-xval[2]*xval[3];
            gval[5] = 161.18996*xval[2]*xval[3]+5000.0*xval[1]*xval[3]-489510.0*xval[1]-xval[2]*xval[3]*xval[6];
            gval[6] = 0.33*xval[6]-xval[4]+44.333333;
            gval[7] = 0.022556*xval[4]-0.007595*xval[6]-1.0;
            gval[8] = 0.00061*xval[2]-0.0005*xval[0]-1.0;
            gval[9] = 0.819672*xval[0]-xval[2]+0.819672;
            gval[10]= 24500.0*xval[1]-250.0*xval[1]*xval[3]-xval[2]*xval[3];
            gval[11]= 1020.4082*xval[3]*xval[1]+1.2244898*xval[2]*xval[3]-100000*xval[1];
            gval[12]= 6.25*xval[0]*xval[5]+6.25*xval[0]-7.625*xval[2]-100000;
            gval[13]= 1.22*xval[2]-xval[5]*xval[0]-xval[0]+1.0;
            break;
        }
    case 4:
        {
            double k1 = 0.09755988;
            double k2 = 0.99*k1;
            double k3 = 0.0391908;
            double k4 = 0.9*k3;
            fval[0] = -xval[3];
            hval[0] = xval[0]+k1*xval[1]*xval[4]-1;
            hval[1] = xval[1]-xval[0]+k2*xval[1]*xval[5];
            hval[2] = xval[2]+xval[0]+k3*xval[2]*xval[4]-1;
            hval[3] = xval[3]-xval[2]+xval[1]-xval[0]+k4*xval[3]*xval[5];
            gval[0] = sqrt(xval[4])+sqrt(xval[5])-4;
            break;
        }
    case 5:
        {
            fval[0] = -(9*xval[0]+15*xval[1]-6*xval[2]-16*xval[3]-10*(xval[4]+xval[5]));
            gval[0] = xval[8]*xval[6]+2*xval[4]-2.5*xval[0];
            gval[1] = xval[8]*xval[7]+2*xval[5]-1.5*xval[1];
            hval[0] = xval[6]+xval[7]-xval[2]-xval[3];
            hval[1] = xval[0]-xval[6]-xval[4];
            hval[2] = xval[1]-xval[7]-xval[5];
            hval[3] = xval[8]*xval[6]+xval[8]*xval[7]-3*xval[2]-xval[3];
            break;
        }
    case 6:
        {
            fval[0] = 0.9979+0.00432*xval[4]+0.01517*xval[12];
            hval[0] = xval[0]+xval[1]+xval[2]+xval[3]-300;
            hval[1] = xval[5]-xval[6]-xval[7];
            hval[2] = xval[8]-xval[9]-xval[10]-xval[11];
            hval[3] = xval[13]-xval[14]-xval[15]-xval[16];
            hval[4] = xval[17]-xval[18]-xval[19];
            hval[5] = xval[4]*xval[20]-xval[5]*xval[21]-xval[8]*xval[22];
            hval[6] = xval[4]*xval[23]-xval[5]*xval[24]-xval[8]*xval[25];
            hval[7] = xval[4]*xval[26]-xval[5]*xval[27]-xval[8]*xval[28];
            hval[8] = xval[12]*xval[29]-xval[13]*xval[30]-xval[17]*xval[31];
            hval[9] = xval[12]*xval[32]-xval[13]*xval[33]-xval[17]*xval[34];
            hval[10] = xval[12]*xval[35]-xval[13]*xval[36]-xval[17]*xval[37];
            hval[11] = 1./3.*xval[0]+xval[14]*xval[30]-xval[4]*xval[20];
            hval[12] = 1./3.*xval[0]+xval[14]*xval[33]-xval[4]*xval[23];
            hval[13] = 1./3.*xval[0]+xval[14]*xval[36]-xval[4]*xval[26];
            hval[14] = 1./3.*xval[1]+xval[9]*xval[22]-xval[12]*xval[29];
            hval[15] = 1./3.*xval[1]+xval[9]*xval[25]-xval[12]*xval[32];
            hval[16] = 1./3.*xval[1]+xval[9]*xval[28]-xval[12]*xval[35];
            hval[17] = 1./3.*xval[2]+xval[6]*xval[21]+xval[10]*xval[22]+xval[15]*xval[30]+xval[18]*xval[31]-30;
            hval[18] = 1./3.*xval[2]+xval[6]*xval[24]+xval[10]*xval[25]+xval[15]*xval[33]+xval[18]*xval[34]-50;
            hval[19] = 1./3.*xval[2]+xval[6]*xval[27]+xval[10]*xval[28]+xval[15]*xval[36]+xval[18]*xval[37]-30;
            hval[20] = xval[20]+xval[23]+xval[26]-1;
            hval[21] = xval[21]+xval[24]+xval[27]-1;
            hval[22] = xval[22]+xval[25]+xval[28]-1;
            hval[23] = xval[29]+xval[32]+xval[35]-1;
            hval[24] = xval[30]+xval[33]+xval[36]-1;
            hval[25] = xval[31]+xval[34]+xval[37]-1;
            hval[26] = xval[24];
            hval[27] = xval[27];
            hval[28] = xval[22];
            hval[29] = xval[36];
            hval[30] = xval[31];
            hval[31] = xval[34];
            break;
        }
    case 7:
        {
            double c[12] = {0.23947, 0.75835, -0.0139904, -0.0661588, 0.0093514, 0.0338147, 0.0077308, 0.0373349, -0.0005719, 0.0016371, 0.0042656, 0.0288996};
            fval[0] = c[0]+(c[2]+c[4]*xval[23]+c[6]*xval[27]+c[8]*xval[32]+c[10]*xval[33])*xval[4]+
                    c[1]+(c[3]+c[5]*xval[25]+c[7]*xval[30]+c[9]*xval[37]+c[11]*xval[38])*xval[12];
            hval[0] = xval[0]+xval[1]+xval[2]+xval[3]-300;
            hval[1] = xval[5]-xval[6]-xval[7];
            hval[2] = xval[8]-xval[9]-xval[10]-xval[11];
            hval[3] = xval[13]-xval[14]-xval[15]-xval[16];
            hval[4] = xval[17]-xval[18]-xval[19];
            hval[5] = xval[5]*xval[20]-xval[23]*xval[24];
            hval[6] = xval[13]*xval[21]-xval[25]*xval[26];
            hval[7] = xval[8]*xval[22]-xval[27]*xval[28];
            hval[8] = xval[17]*xval[29]-xval[30]*xval[31];
            hval[9] = xval[24]-xval[4]*xval[32];
            hval[10] = xval[28]-xval[4]*xval[33];
            hval[11] = xval[34]-xval[4]*xval[35];
            hval[12] = xval[36]-xval[12]*xval[37];
            hval[13] = xval[26]-xval[12]*xval[38];
            hval[14] = xval[31]-xval[12]*xval[39];
            hval[15] = xval[24]-xval[5]*xval[20]-xval[8]*xval[40];
            hval[16] = xval[28]-xval[5]*xval[41]-xval[8]*xval[22];
            hval[17] = xval[34]-xval[5]*xval[42]-xval[8]*xval[43];
            hval[18] = xval[36]-xval[13]*xval[44]-xval[17]*xval[45];
            hval[19] = xval[26]-xval[13]*xval[21]-xval[17]*xval[46];
            hval[20] = xval[31]-xval[13]*xval[47]-xval[17]*xval[29];
            hval[21] = 1./3.*xval[0]+xval[14]*xval[44]-xval[24];
            hval[22] = 1./3.*xval[0]+xval[14]*xval[21]-xval[28];
            hval[23] = 1./3.*xval[0]+xval[14]*xval[47]-xval[34];
            hval[24] = 1./3.*xval[1]+xval[9]*xval[40]-xval[36];
            hval[25] = 1./3.*xval[1]+xval[9]*xval[22]-xval[26];
            hval[26] = 1./3.*xval[1]+xval[9]*xval[43]-xval[31];
            hval[27] = xval[32]+xval[33]+xval[35]-1;
            hval[28] = xval[20]+xval[41]+xval[42]-1;
            hval[29] = xval[40]+xval[22]+xval[43]-1;
            hval[30] = xval[37]+xval[38]+xval[39]-1;
            hval[31] = xval[44]+xval[21]+xval[47]-1;
            hval[32] = xval[45]+xval[46]+xval[29]-1;
            hval[33] = xval[42];
            hval[34] = xval[45];
            hval[35] = 1./3.*xval[2]+xval[6]*xval[20]+xval[10]*xval[40]+xval[15]*xval[44]+xval[18]*xval[45]-30;
            hval[36] = 1./3.*xval[2]+xval[6]*xval[41]+xval[10]*xval[22]+xval[15]*xval[21]+xval[18]*xval[46]-50;
            hval[37] = 1./3.*xval[2]+xval[6]*xval[42]+xval[10]*xval[43]+xval[15]*xval[47]+xval[18]*xval[29]-30;
            break;
        }
    case 8:
        {
            xval[1] = round(xval[1]);
            fval[0] = 2*xval[0] + xval[1];
            gval[0] = 1.25 - xval[0]*xval[0] - xval[1];
            gval[1] = xval[0] + xval[1] - 1.6;
            break;
        }
    case 9:
        {
            xval[2] = round(xval[2]);
            fval[0] = -xval[2] + 2*xval[0] + xval[1];
            hval[0] = xval[0] - 2*exp(-xval[1]);
            gval[0] = -xval[0]+xval[1]+xval[2];
            break;
        }
    case 10:
        {
            xval[2] = round(xval[2]);
            fval[0] = -0.7*xval[2] + 5*(xval[0]-0.5)*(xval[0]-0.5) + 0.8;
            gval[0] = -exp(xval[0] - 0.2) - xval[1];
            gval[1] = xval[1] + 1.1*xval[2] + 1;
            gval[2] = xval[0] - xval[2] -0.2;
            break;
        }
    case 11:
        {
            double x1 = xval[0];
            double x2 = xval[1];
            double v1 = xval[2];
            double v2 = xval[3];
            double y1 = round(xval[4]);
            double y2 = round(xval[5]);
            double x_ = xval[6];

            double z1 = 0.9*(1-exp(-0.5*v1))*x1;
            double z2 = 0.8*(1-exp(-0.4*v2))*x2;

            fval[0] = 7.5*y1 + 5.5*y2 + 7*v1 + 6*v2 + 5*x_;

            hval[0] = y1 + y2 - 1;
            hval[1] = z1 + z2 - 10;
            hval[2] = x1 + x2 -x_;
            hval[3] = z1*y1 + z2*y2 - 10;
            gval[0] = v1 - 10*y1;
            gval[1] = v2 - 10*y2;
            gval[2] = x1 - 20*y1;
            gval[3] = x2 - 20*y2;
            break;
        }
    case 12:
        {
            double x1 = xval[0];
            double x2 = xval[1];
            double x3 = xval[2];
            double y1 = round(xval[3]);
            double y2 = round(xval[4]);
            double y3 = round(xval[5]);
            double y4 = round(xval[6]);
            double x1pow = fastpow(x1-1,22);//x1pow = pow(x1-1,22); //
            fval[0] = (y1-1)*(y1-1) + (y2-1)*(y2-1) + (y3-1)*(y3-1) - log(y4+1) + x1pow + (x2-2)*(x2-2) + (x3-3)*(x3-3);
            gval[0] = x1 + x2 + x3 + y1 + y2 + y3 - 5;
            gval[1] = y3*y3 + x1*x1 + x2*x2 + x3*x3 - 5.5;
            gval[2] = x1 + y1 - 1.2;
            gval[3] = x2 + y2 - 1.8;
            gval[4] = x3 + y3 - 2.5;
            gval[5] = x1 + y4 - 1.2;
            gval[6] = y2*y2 + x2*x2 - 1.64;
            gval[7] = y3*y3 + x3*x3 - 4.25;
            gval[8] = y2*y2 + x3*x3 - 4.64;
            break;
        }
    case 13:
        {
            double x1 = xval[0];
            double x2 = xval[1];
            double x3 = xval[2];
            double y1 = round(xval[3]);
            double y2 = round(xval[4]);
            fval[0] = -5.357854*x1*x1 - 0.835689*y1*x3 - 37.29329*y1 + 40792.141;
            gval[0] = 85.334407 + 0.0056858*y2*x3 + 0.0006262*y1*x2 - 0.0022053*y1*y1*x3 - 92;
            gval[1] = 80.51249 + 0.0071317*y2*x3 + 0.0029955*y1*x2 + 0.0021813*x1*x1 -90 -20;
            gval[2] = 9.300961 + 0.0047026*y1*x2 + 0.0012547*y1*x1 + 0.0019085*x1*x2 - 20 - 5;
            break;
        }
    case 14:
        {
            double H = 6000;
            double alp = 250;
            double beta = 0.6;
            double Q1 = 40000;
            double Q2 = 20000;
            double N1 = round(xval[0]);
            double N2 = round(xval[1]);
            double N3 = round(xval[2]);
            double V1 = xval[3];
            double V2 = xval[4];
            double V3 = xval[5];
            double TL1 = xval[6];
            double TL2 = xval[7];
            double B1 = xval[8];
            double B2 = xval[9];
            fval[0] = alp*(N1*pow(V1,beta)+N2*pow(V2,beta)+N3*pow(V3,beta));
            gval[0] = Q1*TL1/B1+Q2*TL2/B2-H;
            gval[1] = 2*B1+4*B2-V1;
            gval[2] = 3*B1+6*B2-V2;
            gval[3] = 4*B1+3*B2-V3;
            gval[4] = 8-N1*TL1;
            gval[5] = 20-N2*TL1;
            gval[6] = 8-N3*TL1;
            gval[7] = 16-N1*TL2;
            gval[8] = 4-N2*TL2;
            gval[9] = 4-N3*TL2;
            break;
        }
    case 15:
        {
            fval[0] = 0.7854*xval[0]*xval[1]*xval[1]*(3.3333*xval[2]*xval[2]+14.9334*xval[2]-43.0934)-1.508*xval[0]*(xval[5]*xval[5]+xval[6]*xval[6])
                +7.477*(xval[5]*xval[5]*xval[5]+xval[6]*xval[6]*xval[6])+0.7854*(xval[3]*xval[5]*xval[5]+xval[4]*xval[6]*xval[6]);

            gval[0] = -xval[0]*xval[1]*xval[1]*xval[2]+27;
            gval[1] = -xval[0]*xval[1]*xval[1]*xval[2]*xval[2]+397.5;
            gval[2] = -xval[1]*xval[5]*xval[5]*xval[5]*xval[5]*xval[2]*pow(xval[3],-3)+1.93;
            gval[3] = -xval[1]*xval[6]*xval[6]*xval[6]*xval[6]*xval[2]/(xval[4]*xval[4]*xval[4])+1.93;
            gval[4] = 10*pow(xval[5],-3)*sqrt(16.91*1000000+(745*xval[3]/(xval[1]*xval[2]))*(745*xval[3]/(xval[1]*xval[2])))-1100;
            gval[5] = 10*pow(xval[6],-3)*sqrt(157.5*1000000+(745*xval[4]/(xval[1]*xval[2]))*(745*xval[4]/(xval[1]*xval[2])))-850;
            gval[6] = xval[1]*xval[2]-40;
            gval[7] = -xval[0]/xval[1]+5;
            gval[8] = xval[0]/xval[1]-12;
            gval[9] = 1.5*xval[5]-xval[3]+1.9;
            gval[10] = 1.1*xval[6]-xval[4]+1.9;
            break;
        }
    case 16:
        {
            fval[0] = 63098.88*xval[1]*xval[3]*xval[11]+5441.5*xval[1]*xval[1]*xval[11]+115055.5*pow(xval[1],1.664)*xval[5]
                +6172.27*xval[1]*xval[1]*xval[5]+63098.88*xval[0]*xval[2]*xval[10]+5441.5*xval[0]*xval[0]*xval[10]
                +115055.5*pow(xval[0],1.664)*xval[4]+6172.27*xval[0]*xval[0]*xval[4]+140.53*xval[0]*xval[10]+281.29*xval[2]*xval[10]
                +70.26*xval[0]*xval[0]+281.29*xval[0]*xval[2]+281.29*xval[2]*xval[2]+14437*pow(xval[7],1.8812)*pow(xval[11],0.3424)
                *xval[9]/xval[13]*xval[0]*xval[0]*xval[6]/xval[8]+20470.2*pow(xval[6],2.893)*pow(xval[10],0.316)*xval[0]*xval[0];
            gval[0] = 1.524/xval[6]-1;
            gval[1] = 1.524/xval[7]-1;
            gval[2] = 0.07789*xval[0]-2/xval[6]*xval[8]-1;
            gval[3] = 7.05305/xval[8]*xval[0]*xval[0]*xval[9]/xval[7]/xval[1]/xval[13]-1;
            gval[4] = 0.0833/xval[12]*xval[13]-1;
            gval[5] = 0.04771*xval[9]*pow(xval[7],1.8812)*pow(xval[11],0.3424)-1;
            gval[6] = 0.0488*xval[8]*pow(xval[6],1.893)*pow(xval[10],0.316)-1;
            gval[7] = 0.0099*xval[0]/xval[2]-1;
            gval[8] = 0.0193*xval[1]/xval[3]-1;
            gval[9] = 0.0298*xval[0]/xval[4]-1;
            gval[10] = 47.136*pow(xval[1],0.333)/xval[9]*xval[11]-1.333*xval[7]*pow(xval[12],2.1195)+62.08*pow(xval[12],2.1195)*pow(xval[7],0.2)/(xval[11]*xval[9])-1;
            gval[11] = 0.056*xval[1]/xval[5]-1;
            gval[12] = 2./xval[8]-1;
            gval[13] = 2./xval[9]-1;
            gval[14] = xval[11]/xval[10]-1;
            break;
        }
    case 17:
        {
            fval[0] = xval[0]*xval[0]*xval[1]*(xval[2]+2);
            gval[0] = 1-(xval[1]*xval[1]*xval[1]*xval[2])/(71785*xval[0]*xval[0]*xval[0]*xval[0]);
            gval[1] = (4*xval[1]*xval[1]-xval[0]*xval[1])/(12566*(xval[1]*xval[0]*xval[0]*xval[0]-xval[0]*xval[0]*xval[0]*xval[0])) + 1./(5108*xval[0]*xval[0])-1;
            gval[2] = 1-140.45*xval[0]/(xval[1]*xval[1]*xval[2]);
            gval[3] = (xval[0]+xval[1])/1.5-1;
            break;
        }
    case 18:
        {
            xval[0] = 0.0625*round(xval[0]);
            xval[1] = 0.0625*round(xval[1]);
            fval[0] = 0.6224*xval[0]*xval[2]*xval[3]+1.7781*xval[1]*xval[2]*xval[2]
                     +3.1661*xval[0]*xval[0]*xval[3]+19.84*xval[0]*xval[0]*xval[2];
            gval[0] = -xval[0]+0.0193*xval[2];
            gval[1] = -xval[1]+0.00954*xval[2];
            gval[2] = -M_PI*xval[2]*xval[2]*xval[3]-4./3.*M_PI*xval[2]*xval[2]*xval[2]+1296000;
            gval[3] = xval[3]-240;
            break;
        }
    case 19:
        {
            fval[0] = 1.10471*xval[0]*xval[0]*xval[1]+0.04811*xval[2]*xval[3]*(14+xval[1]);
            double P = 6000; double L = 14; double delta_max = 0.25; double E = 30*1e6; double G = 12*1e6;
            double T_max = 13600; double sigma_max = 30000;
            double Pc = 4.013*E*sqrt(xval[2]*xval[2]*xval[3]*xval[3]*xval[3]*xval[3]*xval[3]*xval[3]/30.)/(L*L)*(1.-xval[2]/(2.*L)*sqrt(E/(4.*G)));
            double sigma = 6*P*L/(xval[3]*xval[2]*xval[2]);
            double delta = 6*P*L*L*L/(E*xval[2]*xval[2]*xval[3]);
            double J = 2*(sqrt(2)*xval[0]*xval[1]*(xval[1]*xval[1]/4+(xval[0]+xval[2])*(xval[0]+xval[2])/4));
            double R = sqrt(xval[1]*xval[1]/4+(xval[0]+xval[2])*(xval[0]+xval[2])/4);
            double M = P*(L+xval[1]/2);
            double ttt = M*R/J;
            double tt = P/(sqrt(2)*xval[0]*xval[1]);
            double t  = sqrt(tt*tt+2*tt*ttt*xval[1]/(2*R)+ttt*ttt);
            gval[0] = t-T_max;
            gval[1] = sigma-sigma_max;
            gval[2] = xval[0]-xval[3];
            gval[3] = delta-delta_max;
            gval[4] = P-Pc;
            break;
        }
    case 20:
        {
            fval[0] = (2*sqrt(2)*xval[0]+xval[1])*100;
            gval[0] = (sqrt(2)*xval[0]+xval[1])/(sqrt(2.)*xval[0]*xval[0]+2*xval[0]*xval[1])*2-2;
            gval[1] = xval[1]/(sqrt(2)*xval[0]*xval[0]+2*xval[0]*xval[1])*2-2;
            gval[2] = 1./(sqrt(2)*xval[1]+xval[0])*2-2;
            break;
        }
    case 21:
        {
            double Mf = 3; double Ms = 40; double Iz = 55; double n = 250; double Tmax = 15; double s = 1.5; double delta = 0.5;
            double Vsrmax = 10; double rho = 0.0000078; double pmax = 1; double mu = 0.6; double Lmax = 30; double delR = 20;
            double Rsr = 2./3.*(xval[1]*xval[1]*xval[1]-xval[0]*xval[0]*xval[0])/(xval[1]*xval[1]*xval[0]*xval[0]);
            double Vsr = M_PI*Rsr*n/30.;
            double A   = M_PI*(xval[1]*xval[1]-xval[0]*xval[0]);
            double Prz = xval[3]/A;
            double w   = M_PI*n/30.;
            double Mh  = 2./3.*mu*xval[3]*xval[4]*(xval[1]*xval[1]*xval[1]-xval[0]*xval[0]*xval[0])/(xval[1]*xval[1]-xval[0]*xval[0]);
            double T   = Iz*w/(Mh+Mf);

            fval[0] = M_PI*(xval[1]*xval[1]-xval[0]*xval[0])*xval[2]*(xval[4]+1.)*rho;
            gval[0] = -xval[1]+xval[0]+delR;
            gval[1] = (xval[4]+1)*(xval[2]+delta)-Lmax;
            gval[2] = Prz-pmax;
            gval[3] = Prz*Vsr-pmax*Vsrmax;
            gval[4] = Vsr-Vsrmax;
            gval[5] = T-Tmax;
            gval[6] = s*Ms-Mh;
            gval[7] = -T;
            break;
        }
    case 22:
        {
            for(int i=0;i!=global_D[21];i++)
                xval[i] = round(fabs(xval[i]));
            double Pind[3] = {3,4,5};
            double mind[6] = {1.75, 2, 2.25, 2.5, 2.75, 3.0};
            double N1 = xval[0];
            double N2 = xval[1];
            double N3 = xval[2];
            double N4 = xval[3];
            double N5 = xval[4];
            double N6 = xval[5];
            double p  = Pind[int(xval[6])-1];
            double m1 = mind[int(xval[7])-1];
            double m2 = mind[int(xval[8])-1];

            double i1 = N6/N4;
            double i01 = 3.11;
            double i2 = N6*(N1*N3+N2*N4)/(N1*N3*(N6-N4));
            double i02 = 1.84;
            double iR = -(N2*N6/(N1*N3));
            double i0R = -3.11;
            fval[0] = max(i1-i01,max(i2-i02,iR-i0R));

            double Dmax = 220;
            double dlt22 = 0.5;
            double dlt33 = 0.5;
            double dlt55 = 0.5;
            double dlt35 = 0.5;
            double dlt34 = 0.5;
            double dlt56 = 0.5;
            complex<double> z1;
            z1 = ((N6-N3)*(N6-N3)+(N4+N5)*(N4+N5)-(N3+N5)*(N3+N5))/(2*(N6-N3)*(N4+N5));
            complex<double> beta = acos(z1);
            gval[0] = m2*(N6+2.5)-Dmax;
            gval[1] = m1*(N1+N2)+m1*(N2+2)-Dmax;
            gval[2] = m2*(N4+N5)+m2*(N5+2)-Dmax;
            gval[3] = abs(m1*(N1+N2)-m2*(N6-N3))-m1-m2;
            gval[4] = -((N1+N2)*sin(M_PI/p)-N2-2-dlt22);
            gval[5] = -((N6-N3)*sin(M_PI/p)-N3-2-dlt33);
            gval[6] = -((N4+N5)*sin(M_PI/p)-N5-2-dlt55);
            if(abs(beta.imag()) > 1e-10)
                gval[7] = 1e6;
            else
                gval[7] = (N3+N5+2+dlt35)*(N3+N5+2+dlt35)-((N6-N3)*(N6-N3)+(N4+N5)*(N4+N5)-2*(N6-N3)*(N4+N5)*cos(2*M_PI/p-beta.real()));
            gval[8] = -(N6-2*N3-N4-4-2*dlt34);
            gval[9] = -(N6-N4-2*N5-4-2*dlt56);
            hval[0]  = int(N6-N4)%int(p);
            break;
        }
    case 23:
        {
            double d1 = xval[0]*1e-3; double d2 = xval[1]*1e-3; double d3 = xval[2]*1e-3; double d4 = xval[3]*1e-3; double w = xval[4]*1e-3;
            double N = 350; double N1 = 750; double N2 = 450; double N3 = 250; double N4 = 150;
            double rho = 7200; double a = 3; double mu = 0.35; double s = 1.75*1e6; double t = 8*1e-3;

            fval[0] = rho*w*M_PI/4*(d1*d1*(1+(N1/N)*(N1/N))+d2*d2*(1+(N2/N)*(N2/N))+d3*d3*(1+(N3/N)*(N3/N))+d4*d4*(1+(N4/N)*(N4/N)));

            double C1 = M_PI*d1/2*(1+N1/N)+(N1/N-1)*(N1/N-1)*d1*d1/(4*a)+2*a;
            double C2 = M_PI*d2/2*(1+N2/N)+(N2/N-1)*(N2/N-1)*d2*d2/(4*a)+2*a;
            double C3 = M_PI*d3/2*(1+N3/N)+(N3/N-1)*(N3/N-1)*d3*d3/(4*a)+2*a;
            double C4 = M_PI*d4/2*(1+N4/N)+(N4/N-1)*(N4/N-1)*d4*d4/(4*a)+2*a;
            double R1 = exp(mu*(M_PI-2*asin((N1/N-1)*d1/(2*a))));
            double R2 = exp(mu*(M_PI-2*asin((N2/N-1)*d2/(2*a))));
            double R3 = exp(mu*(M_PI-2*asin((N3/N-1)*d3/(2*a))));
            double R4 = exp(mu*(M_PI-2*asin((N4/N-1)*d4/(2*a))));
            double P1 = s*t*w*(1-exp(-mu*(M_PI-2*asin((N1/N-1)*d1/(2*a)))))*M_PI*d1*N1/60;
            double P2 = s*t*w*(1-exp(-mu*(M_PI-2*asin((N2/N-1)*d2/(2*a)))))*M_PI*d2*N2/60;
            double P3 = s*t*w*(1-exp(-mu*(M_PI-2*asin((N3/N-1)*d3/(2*a)))))*M_PI*d3*N3/60;
            double P4 = s*t*w*(1-exp(-mu*(M_PI-2*asin((N4/N-1)*d4/(2*a)))))*M_PI*d4*N4/60;

            gval[0] = -R1+2;
            gval[1] = -R2+2;
            gval[2] = -R3+2;
            gval[3] = -R4+2;
            gval[4] = -P1+(0.75*745.6998);
            gval[5] = -P2+(0.75*745.6998);
            gval[6] = -P3+(0.75*745.6998);
            gval[7] = -P4+(0.75*745.6998);
            hval[0] = C1-C2;
            hval[1] = C1-C3;
            hval[2] = C1-C4;
            break;
        }
    case 24:
        {
            complex<double> a = xval[0];
            complex<double> b = xval[1];
            complex<double> c = xval[2];
            complex<double> e = xval[3];
            complex<double> ff = xval[4];
            complex<double> l = xval[5];
            complex<double> delta = xval[6];
            complex<double> Ymin = 50;
            complex<double> Ymax = 100;
            complex<double> YG = 150;
            complex<double> Zmax = 99.9999;
            complex<double> temp1 = (b*b+l*l+e*e-a*a)/(2.*b*sqrt(l*l+e*e));
            complex<double> beta_0 = 0;
            if(abs(temp1.real())>1)
                beta_0 = acos((b*b+l*l+e*e-a*a)/(2.*b*sqrt(l*l+e*e)))-atan(e/l);
            else
                beta_0 = acos((b.real()*b.real()+l.real()*l.real()+e.real()*e.real()-a.real()*a.real())/(2.*b.real()*sqrt(l.real()*l.real()+e.real()*e.real())))-atan(e.real()/l.real());
            complex<double> temp2 = (b*b+(l-Zmax)*(l-Zmax)+e*e-a*a)/(2.*b*sqrt((l-Zmax)*(l-Zmax)+e*e));
            complex<double> beta_m = 0;
            if(abs(temp2.real()) > 1)
                beta_m = acos((b*b+(l-Zmax)*(l-Zmax)+e*e-a*a)/(2.*b*sqrt((l-Zmax)*(l-Zmax)+e*e)))-atan(e/(l-Zmax));
            else
                beta_m = acos((b.real()*b.real()+(l.real()-Zmax.real())*(l.real()-Zmax.real())+e.real()*e.real()-a.real()*a.real())/(2.*b.real()*sqrt((l.real()-Zmax.real())*(l.real()-Zmax.real())+e.real()*e.real())))-atan(e.real()/(l.real()-Zmax.real()));
            complex<double> obj1 = OBJ11(xval,2);
            complex<double> obj2 = OBJ11(xval,1);
            complex<double> tmp = -obj1-obj2;
            if(tmp.imag() != 0)
                fval[0] = 1e4;
            else
                fval[0] = -obj1.real()-obj2.real();

            complex<double> Yxmin = 2.*(e+ff+c*sin(beta_m+delta));
            complex<double> Yxmax = 2.*(e+ff+c*sin(beta_0+delta));
            complex<double> g0 = Yxmin-Ymin;
            if(fabs(g0.imag()) > 1e-10)
                gval[0] = 1e4;
            else
                gval[0] = g0.real();
            complex<double> g1 = -Yxmin;
            if(fabs(g1.imag()) > 1e-10)
                gval[1] = 1e4;
            else
                gval[1] = g1.real();
            complex<double> g2 = Ymax-Yxmax;
            if(fabs(g2.imag()) > 1e-10)
                gval[2] = 1e4;
            else
                gval[2] = g2.real();
            complex<double> g3 = Yxmax-YG;
            if(fabs(g3.imag()) > 1e-10)
                gval[3] = 1e4;
            else
                gval[3] = g3.real();
            complex<double> g4 = l*l+e*e-(a+b)*(a+b);
            if(fabs(g4.imag()) > 1e-10)
                gval[4] = 1e4;
            else
                gval[4] = g4.real();
            complex<double> g5 = b*b-(a-e)*(a-e)-(l-Zmax)*(l-Zmax);
            if(fabs(g5.imag()) > 1e-10)
                gval[5] = 1e4;
            else
                gval[5] = g5.real();
            complex<double> g6 = Zmax-l;
            if(fabs(g6.imag()) > 1e-10)
                gval[6] = 1e4;
            else
                gval[6] = g6.real();
            break;
        }
    case 25:
        {
            double R = xval[0];
            double Ro = xval[1];
            double mu = xval[2];
            double Q = xval[3];
            double gamma = 0.0307;
            double C = 0.5;
            double n = -3.55;
            double C1 = 10.04;
            double Ws = 101000;
            double Pmax = 1000;
            double delTmax = 50;
            double hmin = 0.001;
            double gg = 386.4;
            double N = 750;
            double P    = (log10(log10(8.122*1e6*mu+0.8))-C1)/n;
            double delT = 2*(pow(10,P)-560);
            double Ef   = 9336*Q*gamma*C*delT;
            double h    = (2*M_PI*N/60)*(2*M_PI*N/60)*2*M_PI*mu/Ef*(R*R*R*R*0.25-Ro*Ro*Ro*Ro*0.25)-1e-5;
            double Po   = (6*mu*Q/(M_PI*h*h*h))*log(R/Ro);
            double W    = M_PI*Po*0.5*(R*R-Ro*Ro)/(log(R/Ro)-1e-5);

            fval[0] = (Q*Po/0.7+Ef)/12.;

            gval[0] = Ws-W;
            gval[1] = Po-Pmax;
            gval[2] = delT-delTmax;
            gval[3] = hmin-h;
            gval[4] = Ro-R;
            gval[5] = gamma/(gg*Po)*(Q/(2*M_PI*R*h))-0.001;
            gval[6] = W/(M_PI*(R*R-Ro*Ro)+1e-5)-5000;
            break;
        }
    case 26:
        {
            double Np1 = int(round(xval[0])); double Ng1 = int(round(xval[1])); double Np2 = int(round(xval[2])); double Ng2 = int(round(xval[3]));
            double Np3 = int(round(xval[4])); double Ng3 = int(round(xval[5])); double Np4 = int(round(xval[6])); double Ng4 = int(round(xval[7]));
            double Pvalue[4] = {3.175, 5.715, 8.255, 12.7};
            double b1 = Pvalue[int(round(xval[8]))-1];
            double b2 = Pvalue[int(round(xval[9]))-1];
            double b3 = Pvalue[int(round(xval[10]))-1];
            double b4 = Pvalue[int(round(xval[11]))-1];
            double XYvalue[9] = {12.7,25.4,38.1,50.8,63.5,76.2,88.9,101.6,114.3};
            double xp1 = XYvalue[int(round(xval[12]))-1];
            double xg1 = XYvalue[int(round(xval[13]))-1];
            double xg2 = XYvalue[int(round(xval[14]))-1];
            double xg3 = XYvalue[int(round(xval[15]))-1];
            double xg4 = XYvalue[int(round(xval[16]))-1];
            double yp1 = XYvalue[int(round(xval[17]))-1];
            double yg1 = XYvalue[int(round(xval[18]))-1];
            double yg2 = XYvalue[int(round(xval[19]))-1];
            double yg3 = XYvalue[int(round(xval[20]))-1];
            double yg4 = XYvalue[int(round(xval[21]))-1];

            double c1 = sqrt((xg1-xp1)*(xg1-xp1)+(yg1-yp1)*(yg1-yp1));
            double c2 = sqrt((xg2-xp1)*(xg2-xp1)+(yg2-yp1)*(yg2-yp1));
            double c3 = sqrt((xg3-xp1)*(xg3-xp1)+(yg3-yp1)*(yg3-yp1));
            double c4 = sqrt((xg4-xp1)*(xg4-xp1)+(yg4-yp1)*(yg4-yp1));
            double CRmin = 1.4; double dmin = 25.4; double phi = 20*M_PI/180.0; double W = 55.9; double JR = 0.2; double Km = 1.6; double Ko = 1.5; double Lmax = 127;
            double sigma_H = 3290; double sigma_N = 2090; double w1 = 5000; double wmin = 245; double wmax = 255; double Cp = 464;

            fval[0] = M_PI/1000.*(b1*c1*c1*(Np1*Np1+Ng1*Ng1)/((Np1+Ng1)*(Np1+Ng1))+b2*c2*c2*(Np2*Np2+Ng2*Ng2)/((Np2+Ng2)*(Np2+Ng2))
                +b3*c3*c3*(Np3*Np3+Ng3*Ng3)/((Np3+Ng3)*(Np3+Ng3))+b4*c4*c4*(Np4*Np4+Ng4*Ng4)/((Np4+Ng4)*(Np4+Ng4)));

            gval[0] = (366000/(M_PI*w1)+2*c1*Np1/(Np1+Ng1))*((Np1+Ng1)*(Np1+Ng1)/(4*b1*c1*c1*Np1))-sigma_N*JR/(0.0167*W*Ko*Km);
            gval[1] = (366000*Ng1/(M_PI*w1*Np1)+2*c2*Np2/(Np2+Ng2))*(((Np2+Ng2)*(Np2+Ng2))/(4*b2*(c2*c2)*Np2))-sigma_N*JR/(0.0167*W*Ko*Km);
            gval[2] = (366000*Ng1*Ng2/(M_PI*w1*Np1*Np2)+2*c3*Np3/(Np3+Ng3))*((Np3+Ng3)*(Np3+Ng3)/(4*b3*(c3*c3)*Np3))-sigma_N*JR/(0.0167*W*Ko*Km);
            gval[3] = (366000*Ng1*Ng2*Ng3/(M_PI*w1*Np1*Np2*Np3)+2*c4*Np4/(Np4+Ng4))*((Np4+Ng4)*(Np4+Ng4)/(4*b4*(c4*c4)*Np4))-sigma_N*JR/(0.0167*W*Ko*Km);
            gval[4] = (366000/(M_PI*w1)+2*c1*Np1/(Np1+Ng1))*(((Np1+Ng1)*(Np1+Ng1)*(Np1+Ng1))/(4*b1*(c1*c1)*Ng1*Np1*Np1))-(sigma_H/Cp)*(sigma_H/Cp)*(sin(phi)*cos(phi))/(0.0334*W*Ko*Km);
            gval[5] = (366000*Ng1/(M_PI*w1*Np1)+2*c2*Np2/(Np2+Ng2))*((Np2+Ng2)*(Np2+Ng2)*(Np2+Ng2)/(4*b2*(c2*c2)*Ng2*Np2*Np2))-(sigma_H/Cp)*(sigma_H/Cp)*(sin(phi)*cos(phi))/(0.0334*W*Ko*Km);
            gval[6] = (366000*Ng1*Ng2/(M_PI*w1*Np1*Np2)+2*c3*Np3/(Np3+Ng3))*((Np3+Ng3)*(Np3+Ng3)*(Np3+Ng3)/(4*b3*(c3*c3)*Ng3*Np3*Np3))-(sigma_H/Cp)*(sigma_H/Cp)*(sin(phi)*cos(phi))/(0.0334*W*Ko*Km);
            gval[7] = (366000*Ng1*Ng2*Ng3/(M_PI*w1*Np1*Np2*Np3)+2*c4*Np4/(Np4+Ng4))*((Np4+Ng4)*(Np4+Ng4)*(Np4+Ng4)/(4*b4*(c4*c4)*Ng4*Np4*Np4))-(sigma_H/Cp)*(sigma_H/Cp)*(sin(phi)*cos(phi))/(0.0334*W*Ko*Km);
            gval[8] =  CRmin*M_PI*cos(phi) - Np1*sqrt((sin(phi)*sin(phi))*0.25+1./Np1+(1./Np1)*(1./Np1))-Ng1*sqrt((sin(phi)*sin(phi))*0.25+1./Ng1+(1./Ng1)*(1./Ng1))+sin(phi)*(Np1+Ng1)*0.5;
            gval[9] =  CRmin*M_PI*cos(phi) - Np2*sqrt((sin(phi)*sin(phi))*0.25+1./Np2+(1./Np2)*(1./Np2))-Ng2*sqrt((sin(phi)*sin(phi))*0.25+1./Ng2+(1./Ng2)*(1./Ng2))+sin(phi)*(Np2+Ng2)*0.5;
            gval[10] = CRmin*M_PI*cos(phi) - Np3*sqrt((sin(phi)*sin(phi))*0.25+1./Np3+(1./Np3)*(1./Np3))-Ng3*sqrt((sin(phi)*sin(phi))*0.25+1./Ng3+(1./Ng3)*(1./Ng3))+sin(phi)*(Np3+Ng3)*0.5;
            gval[11] = CRmin*M_PI*cos(phi) - Np4*sqrt((sin(phi)*sin(phi))*0.25+1./Np4+(1./Np4)*(1./Np4))-Ng4*sqrt((sin(phi)*sin(phi))*0.25+1./Ng4+(1./Ng4)*(1./Ng4))+sin(phi)*(Np4+Ng4)*0.5;
            gval[12] = dmin - 2*c1*Np1/(Np1+Ng1);
            gval[13] = dmin - 2*c2*Np2/(Np2+Ng2);
            gval[14] = dmin - 2*c3*Np3/(Np3+Ng3);
            gval[15] = dmin - 2*c4*Np4/(Np4+Ng4);
            gval[16] = dmin - 2*c1*Ng1/(Np1+Ng1);
            gval[17] = dmin - 2*c2*Ng2/(Np2+Ng2);
            gval[18] = dmin - 2*c3*Ng3/(Np3+Ng3);
            gval[19] = dmin - 2*c4*Ng4/(Np4+Ng4);
            gval[20] = xp1 +((Np1+2)*c1/(Np1+Ng1))-Lmax;
            gval[21] = xg2 +((Np2+2)*c2/(Np2+Ng2))-Lmax;
            gval[22] = xg3 +((Np3+2)*c3/(Np3+Ng3))-Lmax;
            gval[23] = xg4 +((Np4+2)*c4/(Np4+Ng4))-Lmax;
            gval[24] = -xp1 +((Np1+2)*c1/(Np1+Ng1));
            gval[25] = -xg2 +((Np2+2)*c2/(Np2+Ng2));
            gval[26] = -xg3 +((Np3+2)*c3/(Np3+Ng3));
            gval[27] = -xg4 +((Np4+2)*c4/(Np4+Ng4));
            gval[28] = yp1 +((Np1+2)*c1/(Np1+Ng1))-Lmax;
            gval[29] = yg2 +((Np2+2)*c2/(Np2+Ng2))-Lmax;
            gval[30] = yg3 +((Np3+2)*c3/(Np3+Ng3))-Lmax;
            gval[31] = yg4 +((Np4+2)*c4/(Np4+Ng4))-Lmax;
            gval[32] = -yp1 +((Np1+2)*c1/(Np1+Ng1));
            gval[33] = -yg2 +((Np2+2)*c2/(Np2+Ng2));
            gval[34] = -yg3 +((Np3+2)*c3/(Np3+Ng3));
            gval[35] = -yg4 +((Np4+2)*c4/(Np4+Ng4));
            gval[36] = xg1 +((Ng1+2)*c1/(Np1+Ng1))-Lmax;
            gval[37] = xg2 +((Ng2+2)*c2/(Np2+Ng2))-Lmax;
            gval[38] = xg3 +((Ng3+2)*c3/(Np3+Ng3))-Lmax;
            gval[39] = xg4 +((Ng4+2)*c4/(Np4+Ng4))-Lmax;
            gval[40] = -xg1 +((Ng1+2)*c1/(Np1+Ng1));
            gval[41] = -xg2 +((Ng2+2)*c2/(Np2+Ng2));
            gval[42] = -xg3 +((Ng3+2)*c3/(Np3+Ng3));
            gval[43] = -xg4 +((Ng4+2)*c4/(Np4+Ng4));
            gval[44] = yg1 +((Ng1+2)*c1/(Np1+Ng1))-Lmax;
            gval[45] = yg2 +((Ng2+2)*c2/(Np2+Ng2))-Lmax;
            gval[46] = yg3 +((Ng3+2)*c3/(Np3+Ng3))-Lmax;
            gval[47] = yg4 +((Ng4+2)*c4/(Np4+Ng4))-Lmax;
            gval[48] = -yg1 +((Ng1+2)*c1/(Np1+Ng1));
            gval[49] = -yg2 +((Ng2+2)*c2/(Np2+Ng2));
            gval[50] = -yg3 +((Ng3+2)*c3/(Np3+Ng3));
            gval[51] = -yg4 +((Ng4+2)*c4/(Np4+Ng4));
            gval[52] = (0.945*c1-Np1-Ng1)*(b1-5.715)*(b1-8.255)*(b1-12.70)*(-1);
            gval[53] = (0.945*c2-Np2-Ng2)*(b2-5.715)*(b2-8.255)*(b2-12.70)*(-1);
            gval[54] = (0.945*c3-Np3-Ng3)*(b3-5.715)*(b3-8.255)*(b3-12.70)*(-1);
            gval[55] = (0.945*c4-Np4-Ng4)*(b4-5.715)*(b4-8.255)*(b4-12.70)*(-1);
            gval[56] = (0.646*c1-Np1-Ng1)*(b1-3.175)*(b1-8.255)*(b1-12.70)*(+1);
            gval[57] = (0.646*c2-Np2-Ng2)*(b2-3.175)*(b2-8.255)*(b2-12.70)*(+1);
            gval[58] = (0.646*c3-Np3-Ng3)*(b3-3.175)*(b3-8.255)*(b3-12.70)*(+1);
            gval[59] = (0.646*c4-Np4-Ng4)*(b4-3.175)*(b4-8.255)*(b4-12.70)*(+1);
            gval[60] = (0.504*c1-Np1-Ng1)*(b1-3.175)*(b1-5.715)*(b1-12.70)*(-1);
            gval[61] = (0.504*c2-Np2-Ng2)*(b2-3.175)*(b2-5.715)*(b2-12.70)*(-1);
            gval[62] = (0.504*c3-Np3-Ng3)*(b3-3.175)*(b3-5.715)*(b3-12.70)*(-1);
            gval[63] = (0.504*c4-Np4-Ng4)*(b4-3.175)*(b4-5.715)*(b4-12.70)*(-1);
            gval[64] = (0.0*c1-Np1-Ng1)*(b1-3.175)*(b1-5.715)*(b1-8.255)*(+1);
            gval[65] = (0.0*c2-Np2-Ng2)*(b2-3.175)*(b2-5.715)*(b2-8.255)*(+1);
            gval[66] = (0.0*c3-Np3-Ng3)*(b3-3.175)*(b3-5.715)*(b3-8.255)*(+1);
            gval[67] = (0.0*c4-Np4-Ng4)*(b4-3.175)*(b4-5.715)*(b4-8.255)*(+1);
            gval[68] = (-1.812*c1+Np1+Ng1)*(b1-5.715)*(b1-8.255)*(b1-12.70)*(-1);
            gval[69] = (-1.812*c2+Np2+Ng2)*(b2-5.715)*(b2-8.255)*(b2-12.70)*(-1);
            gval[70] = (-1.812*c3+Np3+Ng3)*(b3-5.715)*(b3-8.255)*(b3-12.70)*(-1);
            gval[71] = (-1.812*c4+Np4+Ng4)*(b4-5.715)*(b4-8.255)*(b4-12.70)*(-1);
            gval[72] = (-0.945*c1+Np1+Ng1)*(b1-3.175)*(b1-8.255)*(b1-12.70)*(+1);
            gval[73] = (-0.945*c2+Np2+Ng2)*(b2-3.175)*(b2-8.255)*(b2-12.70)*(+1);
            gval[74] = (-0.945*c3+Np3+Ng3)*(b3-3.175)*(b3-8.255)*(b3-12.70)*(+1);
            gval[75] = (-0.945*c4+Np4+Ng4)*(b4-3.175)*(b4-8.255)*(b4-12.70)*(+1);
            gval[76] = (-0.646*c1+Np1+Ng1)*(b1-3.175)*(b1-5.715)*(b1-12.70)*(-1);
            gval[77] = (-0.646*c2+Np2+Ng2)*(b2-3.175)*(b2-5.715)*(b2-12.70)*(-1);
            gval[78] = (-0.646*c3+Np2+Ng3)*(b3-3.175)*(b3-5.715)*(b3-12.70)*(-1);
            gval[79] = (-0.646*c4+Np3+Ng4)*(b4-3.175)*(b4-5.715)*(b4-12.70)*(-1);
            gval[80] = (-0.504*c1+Np1+Ng1)*(b1-3.175)*(b1-5.715)*(b1-8.255)*(+1);
            gval[81] = (-0.504*c2+Np2+Ng2)*(b2-3.175)*(b2-5.715)*(b2-8.255)*(+1);
            gval[82] = (-0.504*c3+Np3+Ng3)*(b3-3.175)*(b3-5.715)*(b3-8.255)*(+1);
            gval[83] = (-0.504*c4+Np4+Ng4)*(b4-3.175)*(b4-5.715)*(b4-8.255)*(+1);
            gval[84] = wmin -w1*(Np1*Np2*Np3*Np4)/(Ng1*Ng2*Ng3*Ng4);
            gval[85] = -wmax +w1*(Np1*Np2*Np3*Np4)/(Ng1*Ng2*Ng3*Ng4);
            for(int i=0;i!=86;i++)
            {
                if(isinf(gval[i]) || isinf(-gval[i]))
                    gval[i] = 1e6;
            }
            break;
        }
    case 27:
        {
            double E   = 6.98*1e10;      // Young's elastic modulus (N/m^2)
            double rho = 2770;           // density of material (kg/m^3)
            //--------------------------------------------------------------------------
            //                     1         2       3       4       5     6
            double gcoord[12] = {18.288,  18.288,  9.144,  9.144,     0,   0,
                                 9.144,        0,  9.144,      0,  9.144,  0};
            //                    1  2  3  4  5  6  7  8  9  10
            int element[20] = {3, 1, 4, 2, 3, 1, 4, 3, 2, 1,
                                  5, 3, 6, 4, 4, 2, 5, 6, 3, 4};
            //--------------------------------------------------------------------------
            // calculate Weight matrix
            double Weight = 0;
            MatrixXd matK(12,12);
            MatrixXd matM(12,12);
            for(int i=0;i!=12;i++)
            {
                for(int j=0;j!=12;j++)
                {
                    matK(i,j) = 0;
                    matM(i,j) = 0;
                }
            }
            MatrixXd matTe(2,4);
            MatrixXd matke(2,2);
            MatrixXd matke2(4,2);
            MatrixXd matke3(4,4);
            for(int i=0;i!=10;i++)
            {
                double x1 = gcoord[element[i]-1];
                double x2 = gcoord[element[10+i]-1];
                double y1 = gcoord[element[i]-1+6];
                double y2 = gcoord[element[10+i]-1+6];
                double le = sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));
                double l_ij = (x2-x1)/le;
                double m_ij = (y2-y1)/le;
                matTe(0,0) = l_ij;
                matTe(0,1) = m_ij;
                matTe(0,2) = 0;
                matTe(0,3) = 0;
                matTe(1,0) = 0;
                matTe(1,1) = 0;
                matTe(1,2) = l_ij;
                matTe(1,3) = m_ij;
                matke(0,0) = xval[i]*E/le;
                matke(0,1) = -xval[i]*E/le;
                matke(1,0) = -xval[i]*E/le;
                matke(1,1) = xval[i]*E/le;
                matke3 = matTe.transpose()*matke*matTe;
                double metemp = rho*le*xval[i];
                double me[4][4];
                me[0][0] = 2;
                me[0][1] = 0;
                me[0][2] = 1;
                me[0][3] = 0;
                me[1][0] = 0;
                me[1][1] = 2;
                me[1][2] = 0;
                me[1][3] = 1;
                me[2][0] = 1;
                me[2][1] = 0;
                me[2][2] = 2;
                me[2][3] = 0;
                me[3][0] = 0;
                me[3][1] = 1;
                me[3][2] = 0;
                me[3][3] = 2;
                int index[4] = {2*(element[i])-1, 2*(element[i]),  2*(element[10+i])-1,  2*(element[10+i])};
                for(int j=0;j!=4;j++)
                {
                    for(int k=0;k!=4;k++)
                    {
                        matK(index[j]-1,index[k]-1) = matK(index[j]-1,index[k]-1) + matke3(j,k); // assemble ke in K
                        matM(index[j]-1,index[k]-1) = matM(index[j]-1,index[k]-1) + me[j][k]*metemp/6.; // assemble me in M
                    }
                }
                Weight = Weight + rho*le*xval[i];
            }
            fval[0] = Weight;
            double addedMass = 454;
            for(int i=0;i!=12;i++)
                matM(i,i) = matM(i,i) + addedMass;
            MatrixXd eig_A(8, 8);
            MatrixXd eig_B(8, 8);
            for (int j=0;j!=8;j++)
            {
                for (int k=0;k!=8;k++)
                {
                    eig_A(j,k) = matK(j,k);
                    eig_B(j,k) = matM(j,k);
                }
            }
            GeneralizedSelfAdjointEigenSolver<MatrixXd> solver(eig_A, eig_B);
            VectorXd D_eigenvalues = solver.eigenvalues();
            gval[0] = 7. /(sqrt(D_eigenvalues(0))/2./M_PI)-1.;
            gval[1] = 15./(sqrt(D_eigenvalues(1))/2./M_PI)-1.;
            gval[2] = 20./(sqrt(D_eigenvalues(2))/2./M_PI)-1.;
            break;
        }
    case 28:
        {
            double Dm = xval[0];
            double Db = xval[1];
            double Z = round(xval[2]);
            double fi = xval[3];
            double fo = xval[4];
            double KDmin = xval[5];
            double KDmax = xval[6];
            double eps = xval[7];
            double e = xval[8];
            double chi = xval[9];
            double D = 160;
            double d = 90;
            double Bw = 30;
            double T = D-d-2*Db;
            double phi_o = 2*M_PI-2*acos((((D-d)*0.5-0.75*T)*((D-d)*0.5-0.75*T)+(0.5*D-0.25*T-Db)*(0.5*D-0.25*T-Db)
                                          -(0.5*d+0.25*T)*(0.5*d+0.25*T))/(2*(0.5*(D-d)-0.75*T)*(0.5*D-0.25*T-Db)));
            double gamma = Db/Dm;
            double fc = 37.91*pow((1.+pow((1.04*pow(((1.-gamma)/(1.+gamma)),1.72)*pow((fi*(2.*fo-1.)/(fo*(2.*fi-1.))),0.41)),(10./3.))),(-0.3))
                        *(pow(gamma,0.3)*pow((1.-gamma),1.39)/pow((1.+gamma),(1./3.)))*pow((2.*fi/(2.*fi-1.)),0.41);
            // objective function
            fval[0] = fc*pow(Z,(2./3.))*pow(Db,(1.8));
            if(Db > 25.4)
                fval[0] = 3.647*fc*pow(Z,(2./3.))*pow(Db,1.4);
            // constraint
            gval[0] = Z-1.-phi_o/(2.*asin(Db/Dm));
            gval[1] = KDmin*(D-d)-2.*Db;
            gval[2] = 2.*Db-KDmax*(D-d);
            gval[3] = chi*Bw -Db;
            gval[4] = 0.5*(D+d)-Dm;
            gval[5] = Dm-(0.5+e)*(D+d);
            gval[6] = eps*Db-0.5*(D-Dm-Db);
            gval[7] = 0.515 - fi;
            gval[8] = 0.515 - fo;
            break;
        }
    case 29:
        {
            fval[0] = 8.61*1e5*sqrt(xval[0])*xval[1]*pow(xval[2],(-2./3.))/sqrt(xval[3])
                    + 3.69*1e4*xval[2]
                    + 7.72*1e8/xval[0]*pow(xval[1],0.219)
                    - 765.43*1e6/xval[0];
            gval[0] = xval[3]/(xval[1]*xval[1])+1./(xval[1]*xval[1])-1.;
            break;
        }
    case 30:
        {
            double x1 = round(xval[0]);
            double x2 = xval[1];
            double d[42]  = {0.009, 0.0095,0.0104,0.0118,0.0128,0.0132,0.014,
                             0.015, 0.0162,0.0173,0.018, 0.020, 0.023, 0.025,
                             0.028, 0.032, 0.035, 0.041, 0.047, 0.054, 0.063,
                             0.072, 0.080, 0.092, 0.0105,0.120, 0.135, 0.148,
                             0.162, 0.177, 0.192, 0.207, 0.225, 0.244, 0.263,
                             0.283, 0.307, 0.331, 0.362, 0.394, 0.4375,0.500};
            double x3 = d[int(round(xval[2]))-1];
            // objective function
            fval[0] = (M_PI*M_PI*x2*x3*x3*(x1+2.))/4.;
            // constants
            double cf = (4.*x2/x3-1.)/(4.*x2/x3-4.)+0.615*x3/x2;
            double K  = (11.5*1e6*x3*x3*x3*x3)/(8.*x1*x2*x2*x2);
            double lf = 1000./K + 1.05*(x1+2.)*x3;
            double sigp = 300./K;
            gval[0] = (8000.*cf*x2)/(M_PI*x3*x3*x3)-189000.;
            gval[1] = lf-14.;
            gval[2] = 0.2-x3;
            gval[3] = x2-3.;
            gval[4] = 3.-x2/x3;
            gval[5] = sigp - 6.;
            gval[6] = sigp+700./K+1.05*(x1+2.)*x3-lf;
            gval[7] = 1.25-700./K;
            break;
        }
    case 31:
        {
            fval[0] = (1./6.931-(xval[0]*xval[1])/(xval[2]*xval[3]))*(1./6.931-(xval[0]*xval[1])/(xval[2]*xval[3]));
            gval[0] = 0;
            break;
        }
    case 32:
        {
            double x1 = xval[0];
            double x2 = xval[1];
            double x3 = xval[2];
            double x4 = xval[3];
            double x5 = xval[4];
            // objective function
            fval[0] = 5.3578547*x3*x3 + 0.8356891*x1*x5 + 37.293239*x1 - 40792.141;
            // parameters
            double G1 = 85.334407 + 0.0056858*x2*x5 + 0.0006262*x1*x4 - 0.0022053*x3*x5;
            double G2 = 80.51249 + 0.0071317*x2*x5 + 0.0029955*x1*x2 + 0.0021813*x3*x3;
            double G3 = 9.300961 + 0.0047026*x3*x5 + 0.0012547*x1*x3 + 0.0019085*x3*x4;
            // constraint
            gval[0] = G1-92.;
            gval[1] = -G1;
            gval[2] = G2-110.;
            gval[3] = -G2+90.;
            gval[4] = G3-25.;
            gval[5] = -G3+20.;
            break;
        }
    case 33:
        {
            int nely = 10;
            int nelx = 3;
            double penal = 3;
            double KE[8][8] = {{101868131.868132,36785714.2857143,-62252747.2527473,-2829670.32967033,-50934065.9340659,-36785714.2857143,11318681.3186813,2829670.32967033},
                    {36785714.2857143,101868131.868132,2829670.32967033,11318681.3186813,-36785714.2857143,-50934065.9340659,-2829670.32967033,-62252747.2527473},
                    {-62252747.2527473,2829670.32967033,101868131.868132,-36785714.2857143,11318681.3186813,-2829670.32967033,-50934065.9340659,36785714.2857143},
                    {-2829670.32967033,11318681.3186813,-36785714.2857143,101868131.868132,2829670.32967033,-62252747.2527473,36785714.2857143,-50934065.9340659},
                    {-50934065.9340659,-36785714.2857143,11318681.3186813,2829670.32967033,101868131.868132,36785714.2857143,-62252747.2527473,-2829670.32967033},
                    {-36785714.2857143,-50934065.9340659,-2829670.32967033,-62252747.2527473,36785714.2857143,101868131.868132,2829670.32967033,11318681.3186813},
                    {11318681.3186813,-2829670.32967033,-50934065.9340659,36785714.2857143,-62252747.2527473,2829670.32967033,101868131.868132,-36785714.2857143},
                    {2829670.32967033,-62252747.2527473,36785714.2857143,-50934065.9340659,-2829670.32967033,11318681.3186813,-36785714.2857143,101868131.868132}};
            MatrixXd KE2(8, 8);
            for (int j=0;j!=8;j++)
            {
                for (int k=0;k!=8;k++)
                    KE2(j,k) = KE[j][k];
            }
            MatrixXd UE(8, 1);
            double K[88][88];
            VectorXd F(66);
            double U[88];
            double dc[30];
            double dcn[30];
            for(int i=0;i!=30;i++)
                dcn[i] = 0;
            int edof[8];
            for(int i=0;i!=88;i++)
                for(int j=0;j!=88;j++)
                    K[i][j] = 0;
            MatrixXd K2(66,66);
            MatrixXd U_22(66,1);
            for(int elx=0;elx!=nelx;elx++)
            {
                for(int ely=0;ely!=nely;ely++)
                {
                    int n1 = (nely+1)*(elx  )+ely+1;
                    int n2 = (nely+1)*(elx+1)+ely+1;
                    edof[0] = 2*n1-1;
                    edof[1] = 2*n1;
                    edof[2] = 2*n2-1;
                    edof[3] = 2*n2;
                    edof[4] = 2*n2+1;
                    edof[5] = 2*n2+2;
                    edof[6] = 2*n1+1;
                    edof[7] = 2*n1+2;
                    double xvalp3 = xval[elx*10+ely]*xval[elx*10+ely]*xval[elx*10+ely];
                    for(int j=0;j!=8;j++)
                    {
                        for(int k=0;k!=8;k++)
                        {
                            K[edof[j]-1][edof[k]-1] = K[edof[j]-1][edof[k]-1] + xvalp3*KE[j][k];
                        }
                    }
                }
            }
            for(int i=0;i!=65;i++)
                F(i) = 0;
            F(65)=-10000;
            for(int i=0;i!=66;i++)
                for(int j=0;j!=66;j++)
                    K2(i,j) = K[i+22][j+22];
            U_22 = K2.colPivHouseholderQr().solve(F);
            for(int i=0;i!=22;i++)
                U[i] = 0;
            for(int i=22;i!=88;i++)
                U[i] = U_22(i-22);
            double c = 0.;
            for(int ely=0;ely!=nely;ely++)
            {
                for(int elx=0;elx!=nelx;elx++)
                {
                    int n1 = (nely+1)*(elx  )+ely+1;
                    int n2 = (nely+1)*(elx+1)+ely+1;
                    edof[0] = 2*n1-1;
                    edof[1] = 2*n1;
                    edof[2] = 2*n2-1;
                    edof[3] = 2*n2;
                    edof[4] = 2*n2+1;
                    edof[5] = 2*n2+2;
                    edof[6] = 2*n1+1;
                    edof[7] = 2*n1+2;
                    double xvalp2 = xval[elx*10+ely]*xval[elx*10+ely];
                    double xvalp3 = xvalp2*xval[elx*10+ely];
                    for(int k=0;k!=8;k++)
                    {
                        UE(k,0) = U[edof[k]-1];
                    }
                    //cout<<endl;
                    double UeKeUe = (UE.transpose()*KE2*UE).value();
                    c = c + xvalp3*UeKeUe;
                    dc[elx*10+ely] = -penal*xvalp2*UeKeUe;
                }
            }
            double rmin = 1.5;
            int xindex = 0;
            //int counter1 = 0;
            for(int i=0;i!=nelx;i++)
            {
                for(int j=0;j!=nely;j++)
                {
                    double sum=0.0;
                    int kstart = max(i,1);
                    int kend = min(i+2,nelx)+1;
                    int lstart = max(j,1);
                    int lend = min(j+2,nely)+1;
                    for(int k=kstart;k!=kend;k++)
                    {
                        for(int l=lstart;l!=lend;l++)
                        {
                            double fac = rmin-sqrt(double((i+1-k)*(i+1-k)+(j+1-l)*(j+1-l)));
                            sum = sum+max(0.,fac);
                            dcn[i*10+j] = dcn[i*10+j] + max(0.,fac)*xval[(l-1)+(k-1)*10]*dc[(l-1)+(k-1)*10];
                        }
                    }
                    dcn[i*10+j] = dcn[i*10+j]/(xval[xindex]*sum);
                    xindex++;
                }
            }
            fval[0] = c;
            for(int i=0;i!=30;i++)
                gval[i] = dcn[i];
            break;
        }
    case 34:
        {
            double G[30][30] = {{1.1611616e+01, -3.4282621e+00, -4.1629294e+00, -9.6299132e+00,  2.5874565e+00,  3.7024985e+00,  0,  0,  0, -1.8274714e-09,  0,  0,  0,  0,  0,  0,  0,  0, -1.9817024e+00,  8.4080564e-01,  4.6043091e-01,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {-3.4282621e+00,  1.7731691e+01, -4.6015053e+00,  2.5874565e+00, -8.4945254e+00,  1.8828908e+00,  0,  0,  0,  0, -7.5019133e+00,  2.5000364e+00,  0,  0,  0,  0,  0,  0,  8.4080564e-01, -1.7352519e+00,  2.1857809e-01,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {-4.1629294e+00, -4.6015053e+00,  1.7964880e+01,  3.7024985e+00,  1.8828908e+00, -8.9802283e+00,  0,  0,  0,  0,  2.5000364e+00, -7.4501318e+00,  0,  0,  0,  0,  0,  0,  4.6043091e-01,  2.1857809e-01, -1.5345195e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {-9.6299132e+00,  2.5874565e+00,  3.7024985e+00,  9.6299133e+00, -2.5874565e+00, -3.7024985e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {2.5874565e+00, -8.4945254e+00,  1.8828908e+00, -2.5874565e+00,  8.4945255e+00, -1.8828908e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {3.7024985e+00,  1.8828908e+00, -8.9802283e+00, -3.7024985e+00, -1.8828908e+00,  8.9802285e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  3.0457856e-09,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -3.0457856e-09,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  3.0457856e-09,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -3.0457856e-09,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  1.1300560e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.1300560e+01},
                                {-1.8274714e-09,  0,  0,  0,  0,  0,  0,  0,  0,  4.8732570e-09,  0,  0, -3.0457856e-09,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0, -7.5019133e+00,  2.5000364e+00,  0,  0,  0,  0,  0,  0,  0,  2.0005102e+01, -6.6667637e+00,  0, -1.2503189e+01,  4.1667273e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  2.5000364e+00, -7.4501318e+00,  0,  0,  0,  0,  0,  0,  0, -6.6667637e+00,  1.9867018e+01,  0,  4.1667273e+00, -1.2416886e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0, -3.0457856e-09,  0,  0,  3.0457856e-09,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.2503189e+01,  4.1667273e+00,  0,  1.2503189e+01, -4.1667273e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4.1667273e+00, -1.2416886e+01,  0, -4.1667273e+00,  1.2416886e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7.4259920e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -7.4259886e+00,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.1421696e-09,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.1421696e-09,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.1421696e-09,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.1421696e-09},
                                {-1.9817024e+00,  8.4080564e-01,  4.6043091e-01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3.6218998e+01, -6.7116853e+00, -7.4131254e+00, -1.7857001e+01,  4.1892684e+00,  1.8651053e+00, -3.9634048e+00,  1.6816113e+00,  9.2086182e-01, -1.2416886e+01,  0,  4.1667273e+00},
                                {8.4080564e-01, -1.7352519e+00,  2.1857809e-01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -6.7116853e+00,  2.5015880e+01, -4.8450026e+00,  4.1892684e+00, -1.9810121e+01,  4.1892684e+00,  1.6816113e+00, -3.4705037e+00,  4.3715618e-01,  0, -3.0457856e-09,  0},
                                {4.6043091e-01,  2.1857809e-01, -1.5345195e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -7.4131254e+00, -4.8450026e+00,  3.4963751e+01,  1.8651053e+00,  4.1892684e+00, -1.7857001e+01,  9.2086182e-01,  4.3715618e-01, -3.0690389e+00,  4.1667273e+00,  0, -1.2503189e+01},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.7857001e+01,  4.1892684e+00,  1.8651053e+00,  1.7857003e+01, -4.1892684e+00, -1.8651053e+00,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4.1892684e+00, -1.9810121e+01,  4.1892684e+00, -4.1892684e+00,  1.9810123e+01, -4.1892684e+00,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.8651053e+00,  4.1892684e+00, -1.7857001e+01, -1.8651053e+00, -4.1892684e+00,  1.7857003e+01,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -3.9634048e+00,  1.6816113e+00,  9.2086182e-01,  0,  0,  0,  3.9634051e+00, -1.6816113e+00, -9.2086182e-01,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.6816113e+00, -3.4705037e+00,  4.3715618e-01,  0,  0,  0, -1.6816113e+00,  3.4705040e+00, -4.3715618e-01,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9.2086182e-01,  4.3715618e-01, -3.0690389e+00,  0,  0,  0, -9.2086182e-01, -4.3715618e-01,  3.0690392e+00,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0, -3.0457856e-09,  0,  0,  0,  0,  0,  0,  0,  0, -7.4259886e+00,  0,  0, -1.2416886e+01,  0,  4.1667273e+00,  0,  0,  0,  0,  0,  0,  1.9842878e+01,  0, -4.1667273e+00},
                                {0,  0,  0,  0,  0,  0,  0, -3.0457856e-09,  0,  0,  0,  0,  0,  0,  0,  0, -1.1421696e-09,  0,  0, -3.0457856e-09,  0,  0,  0,  0,  0,  0,  0,  0,  7.2337408e-09,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0, -1.1300560e+01,  0,  0,  0,  0,  0,  0,  0,  0, -1.1421696e-09,  4.1667273e+00,  0, -1.2503189e+01,  0,  0,  0,  0,  0,  0, -4.1667273e+00,  0,  2.3803749e+01}};
            double B[30][30] = {{-1.8057389e+01,  4.7178534e+00,  4.5034951e+00,  1.2345501e+01, -2.6060661e+00, -2.9248491e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5.7118876e+00, -2.1117873e+00, -1.5786460e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {4.7178534e+00, -2.4535938e+01,  4.6356556e+00, -2.6060661e+00,  1.2223676e+01, -2.3923205e+00,  0,  0,  0,  0,  6.8996840e+00, -1.0376535e+00,  0,  0,  0,  0,  0,  0, -2.1117873e+00,  5.4125776e+00, -1.2056816e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {4.5034951e+00,  4.6356556e+00, -2.4299590e+01, -2.9248491e+00, -2.3923205e+00,  1.2262079e+01,  0,  0,  0,  0, -1.0376535e+00,  6.9313313e+00,  0,  0,  0,  0,  0,  0, -1.5786460e+00, -1.2056816e+00,  5.1061795e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {1.2345501e+01, -2.6060661e+00, -2.9248491e+00, -1.2345501e+01,  2.6060661e+00,  2.9248491e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {-2.6060661e+00,  1.2223676e+01, -2.3923205e+00,  2.6060661e+00, -1.2223676e+01,  2.3923205e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {-2.9248491e+00, -2.3923205e+00,  1.2262079e+01,  2.9248491e+00,  2.3923205e+00, -1.2262079e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0, -1.1456142e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.1456142e+01},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  6.8996840e+00, -1.0376535e+00,  0,  0,  0,  0,  0,  0,  0, -1.8399157e+01,  2.7670760e+00,  0,  1.1499473e+01, -1.7294225e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0, -1.0376535e+00,  6.9313313e+00,  0,  0,  0,  0,  0,  0,  0,  2.7670760e+00, -1.8483550e+01,  0, -1.7294225e+00,  1.1552219e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.1499473e+01, -1.7294225e+00,  0, -1.1499473e+01,  1.7294225e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.7294225e+00,  1.1552219e+01,  0,  1.7294225e+00, -1.1552219e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2.8343215e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2.8343215e+00,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {5.7118876e+00, -2.1117873e+00, -1.5786460e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.2130566e+01,  1.1532668e+01,  1.0719934e+01,  1.3442684e+01, -5.1973060e+00, -4.2545730e+00,  1.1423775e+01, -4.2235745e+00, -3.1572920e+00,  1.1552219e+01,  0, -1.7294225e+00},
                                {-2.1117873e+00,  5.4125776e+00, -1.2056816e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.1532668e+01, -3.0239018e+01,  8.8143510e+00, -5.1973060e+00,  1.4001285e+01, -5.1973060e+00, -4.2235745e+00,  1.0825155e+01, -2.4113633e+00,  0,  0,  0},
                                {-1.5786460e+00, -1.2056816e+00,  5.1061795e+00,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.0719934e+01,  8.8143510e+00, -4.0260696e+01, -4.2545730e+00, -5.1973060e+00,  1.3442684e+01, -3.1572920e+00, -2.4113633e+00,  1.0212359e+01, -1.7294225e+00,  0,  1.1499473e+01},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.3442684e+01, -5.1973060e+00, -4.2545730e+00, -1.3442684e+01,  5.1973060e+00,  4.2545730e+00,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -5.1973060e+00,  1.4001285e+01, -5.1973060e+00,  5.1973060e+00, -1.4001285e+01,  5.1973060e+00,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.2545730e+00, -5.1973060e+00,  1.3442684e+01,  4.2545730e+00,  5.1973060e+00, -1.3442684e+01,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1.1423775e+01, -4.2235745e+00, -3.1572920e+00,  0,  0,  0, -1.1423775e+01,  4.2235745e+00,  3.1572920e+00,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4.2235745e+00,  1.0825155e+01, -2.4113633e+00,  0,  0,  0,  4.2235745e+00, -1.0825155e+01,  2.4113633e+00,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -3.1572920e+00, -2.4113633e+00,  1.0212359e+01,  0,  0,  0,  3.1572920e+00,  2.4113633e+00, -1.0212359e+01,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2.8343215e+00,  0,  0,  1.1552219e+01,  0, -1.7294225e+00,  0,  0,  0,  0,  0,  0, -1.4386540e+01,  0,  1.7294225e+00},
                                {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                                {0,  0,  0,  0,  0,  0,  0,  0,  1.1456142e+01,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1.7294225e+00,  0,  1.1499473e+01,  0,  0,  0,  0,  0,  0,  1.7294225e+00,  0, -2.2955616e+01}};
            double P[30] = {0,0,0,-1.6000000e-02,-1.2000000e-02,-1.2000000e-02,0,0,-1.7000000e-02,0,-1.7000000e-02,0,0,-2.3000000e-02,0,-1.2800000e-02,0,0,-4.0200000e-02,-4.5100000e-02,-6.7200000e-02,-4.8500000e-02,-6.8000000e-03,-2.9000000e-02,0,0,0,0,0,0};
            double Q[30] = {0,0,0,-1.1000000e-02,-9.0000000e-03,-9.0000000e-03,0,0,2.0000000e-03,0,-1.2500000e-02,0,0,-1.3200000e-02,0,-8.6000000e-03,0,0,-2.3000000e-02,-2.5800000e-02,-4.3900000e-02,1.0000000e-03,1.4000000e-02,-1.2000000e-03,0,0,0,0,0,0};
            MatrixXcd matG(30,30);
            MatrixXcd matB(30,30);
            MatrixXcd matY(30,30);
            MatrixXcd matP(30,1);
            MatrixXcd matQ(30,1);
            MatrixXcd matV(30,1);
            MatrixXcd matPdg(30,1);
            MatrixXcd matQdg(30,1);
            MatrixXcd matPsp(30,1);
            MatrixXcd matQsp(30,1);
            MatrixXcd matI(30,1);
            MatrixXcd matIr(30,1);
            MatrixXcd matIm(30,1);
            MatrixXcd matspI(30,1);
            MatrixXcd matspIr(30,1);
            MatrixXcd matspIm(30,1);
            MatrixXcd matdelP(30,1);
            MatrixXcd matdelQ(30,1);
            MatrixXcd matdelIr(30,1);
            MatrixXcd matdelIm(30,1);
            complex<double> z1(-0.5, -sqrt(3.)*0.5);
            complex<double> z2(-0.5, sqrt(3.)*0.5);
            for(int i=0;i!=30;i++)
            {
                for(int j=0;j!=30;j++)
                {
                    matG.real()(i,j) = G[i][j];
                    matG.imag()(i,j) = 0;
                    matB.real()(i,j) = 0;
                    matB.imag()(i,j) = B[i][j];
                }
                matP(i,0) = P[i];
                matQ(i,0) = Q[i];
                matPdg(i,0) = 0;
                matQdg(i,0) = 0;
            }
            matY = matG + matB;
            matV(0,0) = 1;
            matV(1,0) = z1;
            matV(2,0) = z2;
            matPsp(0,0) = 0;
            matPsp(1,0) = 0;
            matPsp(2,0) = 0;
            matQsp(0,0) = 0;
            matQsp(1,0) = 0;
            matQsp(2,0) = 0;
            for(int i=3;i!=30;i++)
            {
                matV.real()(i) = xval[i-3];
                matV.imag()(i) = xval[i+24];
                matPsp(i) = xval[i+51];
                matQsp(i) = xval[i+78];
            }
            matPdg(8)  = xval[108];
            matPdg(15) = xval[109];
            matPdg(20) = xval[110];
            matPdg(23) = xval[111];
            matPdg(29) = xval[112];
            matQdg(8)  = xval[113];
            matQdg(15) = xval[114];
            matQdg(20) = xval[115];
            matQdg(23) = xval[116];
            matQdg(29) = xval[117];
            matI = matY*matV;
            matIr = matI.real();
            matIm = matI.imag();
            matspI.real() = matPsp.real();
            matspI.imag() = matQsp.real();
            for(int i=0;i!=30;i++)
            {
                matspI(i) = matspI(i)/matV(i);
                matspI.imag()(i) = -matspI.imag()(i);
            }
            matspIr = matspI.real();
            matspIm = matspI.imag();
            matdelP = matPsp-matPdg-matP;
            matdelQ = matQsp-matQdg-matQ;
            matdelIr = matIr-matspIr;
            matdelIm = matIm-matspIm;
            fval[0] = abs(matI(0)+matI(1)+matI(2)) + abs(matI(0)+z1*matI(1)+z2*matI(2));
            for(int i=3;i!=30;i++)
            {
                hval[i-3]  = matdelIr.real()(i,0);
                hval[i+24] = matdelIm.real()(i,0);
                hval[i+51] = matdelP.real()(i,0);
                hval[i+78] = matdelQ.real()(i,0);
            }
            break;
        }
    case 35:
        {
            MatrixXcd matG(38,38);
            MatrixXcd matB(38,38);
            MatrixXcd matY(38,38);
            MatrixXcd matP(38,6);
            MatrixXcd matQ(38,6);
            MatrixXcd matV(38,1);
            MatrixXcd matPdg(38,1);
            MatrixXcd matPsp(38,1);
            MatrixXcd matQsp(38,1);
            MatrixXcd matI(38,1);
            MatrixXcd matIr(38,1);
            MatrixXcd matIm(38,1);
            MatrixXcd matspI(38,1);
            MatrixXcd matspIr(38,1);
            MatrixXcd matspIm(38,1);
            MatrixXcd matdelP(38,1);
            MatrixXcd matdelQ(38,1);
            MatrixXcd matdelIr(38,1);
            MatrixXcd matdelIm(38,1);
            for(int i=0;i!=38;i++)
            {
                for(int j=0;j!=38;j++)
                {
                    matG.real()(i,j) = FunctionPS2_G[i][j];
                    matG.imag()(i,j) = 0;
                    matB.real()(i,j) = 0;
                    matB.imag()(i,j) = FunctionPS2_B[i][j];
                }
                for(int j=0;j!=6;j++)
                {
                    matP.real()(i,j) = FunctionPS2_P[i][j];
                    matQ.real()(i,j) = FunctionPS2_Q[i][j];
                    matP.imag()(i,j) = 0;
                    matQ.imag()(i,j) = 0;
                }
                matPdg(i,0) = 0;
                matdelP.real()(i,0) = 0;
                matdelQ.real()(i,0) = 0;
                matdelP.imag()(i,0) = 0;
                matdelQ.imag()(i,0) = 0;
            }
            matY = matG + matB;
            matV(0,0) = 1;
            matPsp(0,0) = 0;
            matQsp(0,0) = 0;
            for(int i=1;i!=38;i++)
            {
                matV.real()(i) = xval[i-1];
                matV.imag()(i) = xval[i+36];
                matPsp(i) = xval[i+73];
                matQsp(i) = xval[i+110];
            }
            matPdg(33) = xval[148];
            matPdg(34) = xval[149];
            matPdg(35) = xval[150];
            matPdg(36) = xval[151];
            matPdg(37) = xval[152];
            matI = matY*matV;
            matIr = matI.real();
            matIm = matI.imag();
            matspI.real() = matPsp.real();
            matspI.imag() = matQsp.real();
            for(int i=0;i!=38;i++)
            {
                matspI(i) = matspI(i)/matV(i);
                matspI.imag()(i) = -matspI.imag()(i);
            }
            matspIr = matspI.real();
            matspIm = matspI.imag();
            for(int i=0;i!=38;i++)
            {
                matdelP(i,0) = matPsp(i,0)-matPdg(i,0)+matP(i,0)*pow((abs(matV(i,0))/matP(i,4)),matP(i,5));
                matdelQ(i,0) = matQsp(i,0)+matQ(i,0)*pow((abs(matV(i,0))/matQ(i,4)),matQ(i,5));
            }
            matdelIr = matIr-matspIr;
            matdelIm = matIm-matspIm;
            fval[0] = real(matV(0,0)*conj(matI(0,0)));
            for(int i=1;i!=38;i++)
            {
                fval[0] += matPsp.real()(i,0);
                hval[i-1]  = matdelIr.real()(i,0);
                hval[i+36] = matdelIm.real()(i,0);
                hval[i+73] = matdelP.real()(i,0);
                hval[i+110] = matdelQ.real()(i,0);
            }
            break;
        }
    case 36:
        {
            MatrixXcd matG(38,38);
            MatrixXcd matB(38,38);
            MatrixXcd matY(38,38);
            MatrixXcd matP(38,6);
            MatrixXcd matQ(38,6);
            MatrixXcd matV(38,1);
            MatrixXcd matPdg(38,1);
            MatrixXcd matQdg(38,1);
            MatrixXcd matPsp(38,1);
            MatrixXcd matQsp(38,1);
            MatrixXcd matI(38,1);
            MatrixXcd matIr(38,1);
            MatrixXcd matIm(38,1);
            MatrixXcd matspI(38,1);
            MatrixXcd matspIr(38,1);
            MatrixXcd matspIm(38,1);
            MatrixXcd matdelP(38,1);
            MatrixXcd matdelQ(38,1);
            MatrixXcd matdelIr(38,1);
            MatrixXcd matdelIm(38,1);
            for(int i=0;i!=38;i++)
            {
                for(int j=0;j!=38;j++)
                {
                    matG.real()(i,j) = FunctionPS2_G[i][j];
                    matG.imag()(i,j) = 0;
                    matB.real()(i,j) = 0;
                    matB.imag()(i,j) = FunctionPS2_B[i][j];
                }
                for(int j=0;j!=6;j++)
                {
                    matP.real()(i,j) = FunctionPS2_P[i][j];
                    matQ.real()(i,j) = FunctionPS2_Q[i][j];
                    matP.imag()(i,j) = 0;
                    matQ.imag()(i,j) = 0;
                }
                matPdg(i,0) = 0;
                matQdg(i,0) = 0;
                matdelP.real()(i,0) = 0;
                matdelQ.real()(i,0) = 0;
                matdelP.imag()(i,0) = 0;
                matdelQ.imag()(i,0) = 0;
            }
            matY = matG + matB;
            matV(0,0) = 1;
            matPsp(0,0) = 0;
            matQsp(0,0) = 0;
            for(int i=1;i!=38;i++)
            {
                matV.real()(i) = xval[i-1];
                matV.imag()(i) = xval[i+36];
                matPsp(i) = xval[i+73];
                matQsp(i) = xval[i+110];
            }
            matPdg(33) = xval[148];
            matPdg(34) = xval[149];
            matPdg(35) = xval[150];
            matPdg(36) = xval[151];
            matPdg(37) = xval[152];
            matQdg(33) = xval[153];
            matQdg(34) = xval[154];
            matQdg(35) = xval[155];
            matQdg(36) = xval[156];
            matQdg(37) = xval[157];
            matI = matY*matV;
            matIr = matI.real();
            matIm = matI.imag();
            matspI.real() = matPsp.real();
            matspI.imag() = matQsp.real();
            for(int i=0;i!=38;i++)
            {
                matspI(i) = matspI(i)/matV(i);
                matspI.imag()(i) = -matspI.imag()(i);
            }
            matspIr = matspI.real();
            matspIm = matspI.imag();
            for(int i=0;i!=38;i++)
            {
                matdelP(i,0) = matPsp(i,0)-matPdg(i,0)+matP(i,0)*pow((abs(matV(i,0))/matP(i,4)),matP(i,5));
                matdelQ(i,0) = matQsp(i,0)-matQdg(i,0)+matQ(i,0)*pow((abs(matV(i,0))/matQ(i,4)),matQ(i,5));
            }
            matdelIr = matIr-matspIr;
            matdelIm = matIm-matspIm;
            fval[0] = real(matV(0,0)*conj(matI(0,0))) + imag(matV(0,0)*conj(matI(0,0)));
            for(int i=1;i!=38;i++)
            {
                fval[0] += matPsp.real()(i,0);
                fval[0] += matQsp.real()(i,0);
                hval[i-1]  = matdelIr.real()(i,0);
                hval[i+36] = matdelIm.real()(i,0);
                hval[i+73] = matdelP.real()(i,0);
                hval[i+110] = matdelQ.real()(i,0);
            }
            fval[0] = 0.5*fval[0];
            break;
        }
    case 37:
        {
            MatrixXcd matG(30,30);
            MatrixXcd matB(30,30);
            MatrixXcd matY(30,30);
            MatrixXcd matP(30,1);
            MatrixXcd matQ(30,1);
            MatrixXcd matV(30,1);
            MatrixXcd matPg(30,1);
            MatrixXcd matQg(30,1);
            MatrixXcd matPsp(30,1);
            MatrixXcd matQsp(30,1);
            MatrixXcd matI(30,1);
            MatrixXcd matIr(30,1);
            MatrixXcd matIm(30,1);
            MatrixXcd matspI(30,1);
            MatrixXcd matspIr(30,1);
            MatrixXcd matspIm(30,1);
            MatrixXcd matdelP(30,1);
            MatrixXcd matdelQ(30,1);
            MatrixXcd matdelIr(30,1);
            MatrixXcd matdelIm(30,1);
            for(int i=0;i!=30;i++)
            {
                for(int j=0;j!=30;j++)
                {
                    matG.real()(i,j) = FunctionPS11_G[i][j];
                    matG.imag()(i,j) = 0;
                    matB.real()(i,j) = 0;
                    matB.imag()(i,j) = FunctionPS11_B[i][j];
                }
                matP(i,0) = FunctionPS11_P[i];
                matQ(i,0) = FunctionPS11_Q[i];
                matPg(i,0) = 0;
                matQg(i,0) = 0;
            }
            matY = matG + matB;
            matV(0,0) = 1;
            matPsp(0,0) = 0;
            matQsp(0,0) = 0;
            for(int i=1;i!=30;i++)
            {
                matV.real()(i) = xval[i-1];
                matV.imag()(i) = xval[i+28];
                matPsp(i) = xval[i+57];
                matQsp(i) = xval[i+86];
            }
            matPg(1)  = xval[116];
            matPg(12) = xval[117];
            matPg(21) = xval[118];
            matPg(22) = xval[119];
            matPg(26) = xval[120];
            matQg(1)  = xval[121];
            matQg(12) = xval[122];
            matQg(21) = xval[123];
            matQg(22) = xval[124];
            matQg(26) = xval[125];
            matI = matY*matV;
            matIr = matI.real();
            matIm = matI.imag();
            matspI.real() = matPsp.real();
            matspI.imag() = matQsp.real();
            for(int i=0;i!=30;i++)
            {
                matspI(i) = matspI(i)/matV(i);
                matspI.imag()(i) = -matspI.imag()(i);
            }
            matspIr = matspI.real();
            matspIm = matspI.imag();
            matdelP = matPsp-matPg+matP;
            matdelQ = matQsp-matQg+matQ;
            matdelIr = matIr-matspIr;
            matdelIm = matIm-matspIm;
            fval[0] = real(matV(0,0)*conj(matI(0,0)));
            for(int i=1;i!=30;i++)
            {
                fval[0] += matPsp.real()(i,0);
                hval[i-1]  = matdelIr.real()(i,0);
                hval[i+28] = matdelIm.real()(i,0);
                hval[i+57] = matdelP.real()(i,0);
                hval[i+86] = matdelQ.real()(i,0);
            }
            break;
        }
    case 38:
        {
            MatrixXcd matG(30,30);
            MatrixXcd matB(30,30);
            MatrixXcd matY(30,30);
            MatrixXcd matP(30,1);
            MatrixXcd matQ(30,1);
            MatrixXcd matV(30,1);
            MatrixXcd matPg(30,1);
            MatrixXcd matQg(30,1);
            MatrixXcd matPsp(30,1);
            MatrixXcd matQsp(30,1);
            MatrixXcd matI(30,1);
            MatrixXcd matIr(30,1);
            MatrixXcd matIm(30,1);
            MatrixXcd matspI(30,1);
            MatrixXcd matspIr(30,1);
            MatrixXcd matspIm(30,1);
            MatrixXcd matdelP(30,1);
            MatrixXcd matdelQ(30,1);
            MatrixXcd matdelIr(30,1);
            MatrixXcd matdelIm(30,1);
            int ng[6] = {0,1,12,21,22,26};
            double bl[6] = {2,1.75,1,3.25,3,3};
            double cl[6] = {0.02,0.0175,0.0625,0.00834,0.025,0.0025};
            for(int i=0;i!=30;i++)
            {
                for(int j=0;j!=30;j++)
                {
                    matG.real()(i,j) = FunctionPS11_G[i][j];
                    matG.imag()(i,j) = 0;
                    matB.real()(i,j) = 0;
                    matB.imag()(i,j) = FunctionPS11_B[i][j];
                }
                matP(i,0) = FunctionPS11_P[i];
                matQ(i,0) = FunctionPS11_Q[i];
                matPg(i,0) = 0;
                matQg(i,0) = 0;
            }
            matY = matG + matB;
            matV(0,0) = 1;
            matPsp(0,0) = 0;
            matQsp(0,0) = 0;
            for(int i=1;i!=30;i++)
            {
                matV.real()(i) = xval[i-1];
                matV.imag()(i) = xval[i+28];
                matPsp(i) = xval[i+57];
                matQsp(i) = xval[i+86];
            }
            matPg(1)  = xval[116];
            matPg(12) = xval[117];
            matPg(21) = xval[118];
            matPg(22) = xval[119];
            matPg(26) = xval[120];
            matQg(1)  = xval[121];
            matQg(12) = xval[122];
            matQg(21) = xval[123];
            matQg(22) = xval[124];
            matQg(26) = xval[125];
            matI = matY*matV;
            matIr = matI.real();
            matIm = matI.imag();
            matspI.real() = matPsp.real();
            matspI.imag() = matQsp.real();
            for(int i=0;i!=30;i++)
            {
                matspI(i) = matspI(i)/matV(i);
                matspI.imag()(i) = -matspI.imag()(i);
            }
            matspIr = matspI.real();
            matspIm = matspI.imag();
            matdelP = matPsp-matPg+matP;
            matdelQ = matQsp-matQg+matQ;
            matdelIr = matIr-matspIr;
            matdelIm = matIm-matspIm;
            matPg(0)= real(matV(0)*conj(matI(0)));
            fval[0] = 0;
            for(int i=0;i!=6;i++)
            {
                fval[0] += real(bl[i]*matPg(ng[i]) + cl[i]*matPg(ng[i])*matPg(ng[i]));
            }
            for(int i=1;i!=30;i++)
            {
                hval[i-1]  = matdelIr.real()(i,0);
                hval[i+28] = matdelIm.real()(i,0);
                hval[i+57] = matdelP.real()(i,0);
                hval[i+86] = matdelQ.real()(i,0);
            }
            break;
        }
    case 39:
        {
            MatrixXcd matG(30,30);
            MatrixXcd matB(30,30);
            MatrixXcd matY(30,30);
            MatrixXcd matP(30,1);
            MatrixXcd matQ(30,1);
            MatrixXcd matV(30,1);
            MatrixXcd matPg(30,1);
            MatrixXcd matQg(30,1);
            MatrixXcd matPsp(30,1);
            MatrixXcd matQsp(30,1);
            MatrixXcd matI(30,1);
            MatrixXcd matIr(30,1);
            MatrixXcd matIm(30,1);
            MatrixXcd matspI(30,1);
            MatrixXcd matspIr(30,1);
            MatrixXcd matspIm(30,1);
            MatrixXcd matdelP(30,1);
            MatrixXcd matdelQ(30,1);
            MatrixXcd matdelIr(30,1);
            MatrixXcd matdelIm(30,1);
            int ng[6] = {0,1,12,21,22,26};
            double bl[6] = {2,1.75,1,3.25,3,3};
            double cl[6] = {0.02,0.0175,0.0625,0.00834,0.025,0.0025};
            for(int i=0;i!=30;i++)
            {
                for(int j=0;j!=30;j++)
                {
                    matG.real()(i,j) = FunctionPS11_G[i][j];
                    matG.imag()(i,j) = 0;
                    matB.real()(i,j) = 0;
                    matB.imag()(i,j) = FunctionPS11_B[i][j];
                }
                matP(i,0) = FunctionPS11_P[i];
                matQ(i,0) = FunctionPS11_Q[i];
                matPg(i,0) = 0;
                matQg(i,0) = 0;
            }
            matY = matG + matB;
            matV(0,0) = 1;
            matPsp(0,0) = 0;
            matQsp(0,0) = 0;
            for(int i=1;i!=30;i++)
            {
                matV.real()(i) = xval[i-1];
                matV.imag()(i) = xval[i+28];
                matPsp(i) = xval[i+57];
                matQsp(i) = xval[i+86];
            }
            matPg(1)  = xval[116];
            matPg(12) = xval[117];
            matPg(21) = xval[118];
            matPg(22) = xval[119];
            matPg(26) = xval[120];
            matQg(1)  = xval[121];
            matQg(12) = xval[122];
            matQg(21) = xval[123];
            matQg(22) = xval[124];
            matQg(26) = xval[125];
            matI = matY*matV;
            matIr = matI.real();
            matIm = matI.imag();
            matspI.real() = matPsp.real();
            matspI.imag() = matQsp.real();
            for(int i=0;i!=30;i++)
            {
                matspI(i) = matspI(i)/matV(i);
                matspI.imag()(i) = -matspI.imag()(i);
            }
            matspIr = matspI.real();
            matspIm = matspI.imag();
            matdelP = matPsp-matPg+matP;
            matdelQ = matQsp-matQg+matQ;
            matdelIr = matIr-matspIr;
            matdelIm = matIm-matspIm;
            matPg(0)= real(matV(0)*conj(matI(0)));
            fval[0] = 0;
            for(int i=0;i!=6;i++)
            {
                fval[0] += real(bl[i]*matPg(ng[i]) + cl[i]*matPg(ng[i])*matPg(ng[i]));
            }
            for(int i=0;i!=30;i++)
            {
                fval[0] += 0.75*real(matPg(i)-matP(i));
            }
            for(int i=1;i!=30;i++)
            {
                hval[i-1]  = matdelIr.real()(i,0);
                hval[i+28] = matdelIm.real()(i,0);
                hval[i+57] = matdelP.real()(i,0);
                hval[i+86] = matdelQ.real()(i,0);
            }
            break;
        }
    case 40:
        {
            MatrixXcd matY(38,38);
            MatrixXcd matP(38,6);
            MatrixXcd matQ(38,6);
            MatrixXcd matV(38,1);
            MatrixXcd matVr(38,1);
            MatrixXcd matVm(38,1);
            MatrixXcd matPc(38,1);
            MatrixXcd matQc(38,1);
            MatrixXcd matPsp(38,1);
            MatrixXcd matQsp(38,1);
            MatrixXcd matI(38,1);
            MatrixXcd matIr(38,1);
            MatrixXcd matIm(38,1);
            MatrixXcd matspI(38,1);
            MatrixXcd matspIr(38,1);
            MatrixXcd matspIm(38,1);
            MatrixXcd matdelP(38,1);
            MatrixXcd matdelQ(38,1);
            MatrixXcd matdelIr(38,1);
            MatrixXcd matdelIm(38,1);
            MatrixXcd matP2(38,1);
            MatrixXcd matQ2(38,1);
            for(int i=0;i!=38;i++)
            {
                for(int j=0;j!=6;j++)
                {
                    matP.real()(i,j) = FunctionPS2_P[i][j];
                    matQ.real()(i,j) = FunctionPS2_Q[i][j];
                    matP.imag()(i,j) = 0;
                    matQ.imag()(i,j) = 0;
                }
                matPc(i,0) = 0;
                matQc(i,0) = 0;
                matdelP.real()(i,0) = 0;
                matdelQ.real()(i,0) = 0;
                matdelP.imag()(i,0) = 0;
                matdelQ.imag()(i,0) = 0;
            }
            for(int i=1;i!=38;i++)
            {
                matV.real()(i) = xval[i-1];
                matV.imag()(i) = xval[i+36];
            }
            matPc(33) = 196.0015680125441;
            matPc(34) = 665.7789613848202;
            matPc(35) = 221.9263204616068;
            matPc(36) = 443.8526409232136;
            matPc(37) = 443.8526409232136;
            matQc(33) = 20;
            matQc(34) = 33.33333333333333;
            matQc(35) = 20;
            matQc(36) = 100;
            matQc(37) = 10;
            double w = xval[74];
            matV(0,0) = xval[75]+1e-5;
            VectorXcd mat_z(37);
            VectorXcd mat_y(37);
            for(int i=0;i!=37;i++)
            {
                mat_z.real()(i) = FunctionPS14_L[i][2];        // z matrix...
                mat_z.imag()(i) = FunctionPS14_L[i][3]*w;
                mat_y(i) = 1./mat_z(i);            // To get inverse of each element...
            }
            for(int m=0;m!=38;m++)
                for(int n=0;n!=38;n++)
                    matY(m,n) = 0;
            for(int i=0;i!=37;i++)
            {
                matY(int(FunctionPS14_L[i][0])-1,int(FunctionPS14_L[i][1])-1) = matY(int(FunctionPS14_L[i][0])-1,int(FunctionPS14_L[i][1])-1) - mat_y(i);// /a(k);
                matY(int(FunctionPS14_L[i][1])-1,int(FunctionPS14_L[i][0])-1) = matY(int(FunctionPS14_L[i][0])-1,int(FunctionPS14_L[i][1])-1);
            }
            for(int m=0;m!=38;m++)
            {
                for(int n=0;n!=37;n++)
                {
                    if(FunctionPS14_L[n][0]-1 == m)
                    {
                        matY(m,m) = matY(m,m) + mat_y(n); // /(a(n)^2) + b(n); - no effect
                    }
                    else if(FunctionPS14_L[n][1]-1 == m)
                    {
                        matY(m,m) = matY(m,m) + mat_y(n); //  + b(n); - no effect
                    }
                }
            }
            matI = matY*matV;
            matVr = matV.real();
            matVm = matV.imag();
            matIr = matI.real();
            matIm = matI.imag();
            for(int i=0;i!=38;i++)
            {
                matPsp(i,0) = matPc(i,0)*(1.-w)-matP(i,0)*pow((abs(matV(i,0))/matP(i,4)),matP(i,5));
                matQsp(i,0) = matQc(i,0)*(1.-sqrt(matVr(i,0)*matVr(i,0) + matVm(i,0)*matVm(i,0)))-matQ(i,0)*pow((abs(matV(i,0))/matQ(i,4)),matQ(i,5));
            }
            matspI.real() = matPsp.real();
            matspI.imag() = matQsp.real();
            for(int i=0;i!=38;i++)
            {
                matspI(i) = matspI(i)/matV(i);
                matspI.imag()(i) = -matspI.imag()(i);
            }
            matspIr = matspI.real();
            matspIm = matspI.imag();
            matdelIr = matIr-matspIr;
            matdelIm = matIm-matspIm;
            for(int i=0;i!=38;i++)
            {
                matP2(i,0) = matPsp(i,0) - (matVr(i,0)*matIr(i,0)+matVm(i,0)*matIm(i,0));
                matQ2(i,0) = matQsp(i,0) - (matVm(i,0)*matIr(i,0)-matVr(i,0)*matIm(i,0));
            }
            fval[0] = 0;
            for(int i=0;i!=38;i++)
            {
                fval[0] += real(matP2(i,0)*matP2(i,0));
                fval[0] += real(matQ2(i,0)*matQ2(i,0));
                hval[i]  = matdelIr.real()(i,0);
                hval[i+38] = matdelIm.real()(i,0);
            }
            break;
        }
    case 41:
        {
            MatrixXcd matG(38,38);
            MatrixXcd matB(38,38);
            MatrixXcd matY(38,38);
            MatrixXcd matP(38,6);
            MatrixXcd matQ(38,6);
            MatrixXcd matV(38,1);
            MatrixXcd matVr(38,1);
            MatrixXcd matVm(38,1);
            MatrixXcd matPdg(38,1);
            MatrixXcd matQdg(38,1);
            MatrixXcd matPsp(38,1);
            MatrixXcd matQsp(38,1);
            MatrixXcd matI(38,1);
            MatrixXcd matIr(38,1);
            MatrixXcd matIm(38,1);
            MatrixXcd matspI(38,1);
            MatrixXcd matspIr(38,1);
            MatrixXcd matspIm(38,1);
            MatrixXcd matdelP(38,1);
            MatrixXcd matdelQ(38,1);
            MatrixXcd matdelIr(38,1);
            MatrixXcd matdelIm(38,1);
            for(int i=0;i!=38;i++)
            {
                for(int j=0;j!=38;j++)
                {
                    matG.real()(i,j) = FunctionPS2_G[i][j];
                    matG.imag()(i,j) = 0;
                    matB.real()(i,j) = 0;
                    matB.imag()(i,j) = FunctionPS2_B[i][j];
                }
                for(int j=0;j!=6;j++)
                {
                    matP.real()(i,j) = FunctionPS2_P[i][j];
                    matQ.real()(i,j) = FunctionPS2_Q[i][j];
                    matP.imag()(i,j) = 0;
                    matQ.imag()(i,j) = 0;
                }
                matPdg(i,0) = 0;
                matQdg(i,0) = 0;
                matdelP.real()(i,0) = 0;
                matdelQ.real()(i,0) = 0;
                matdelP.imag()(i,0) = 0;
                matdelQ.imag()(i,0) = 0;
            }
            matY = matG + matB;
            matV(0,0) = 1;
            matPsp(0,0) = 0;
            matQsp(0,0) = 0;
            for(int i=1;i!=38;i++)
            {
                matV.real()(i) = xval[i-1];
                matV.imag()(i) = xval[i+36];
            }
            matPdg(33) = 0.2;
            matPdg(34) = 0.2;
            matPdg(35) = 0.2;
            matPdg(36) = 0.2;
            matPdg(37) = 0.2;
            matQdg(33) = 0.18;
            matQdg(34) = 0.18;
            matQdg(35) = 0.18;
            matQdg(36) = 0.18;
            matQdg(37) = 0.18;
            matI = matY*matV;
            matVr = matV.real();
            matVm = matV.imag();
            matIr = matI.real();
            matIm = matI.imag();
            for(int i=0;i!=38;i++)
            {
                matPsp(i,0) = matPdg(i,0)-matP(i,0)*pow((abs(matV(i,0))/matP(i,4)),matP(i,5));
                matQsp(i,0) = matQdg(i,0)-matQ(i,0)*pow((abs(matV(i,0))/matQ(i,4)),matQ(i,5));
            }
            matspI.real() = matPsp.real();
            matspI.imag() = matQsp.real();
            for(int i=0;i!=38;i++)
            {
                matspI(i) = matspI(i)/matV(i);
                matspI.imag()(i) = -matspI.imag()(i);
            }
            matspIr = matspI.real();
            matspIm = matspI.imag();
            for(int i=0;i!=38;i++)
            {
                matdelP(i,0) = matPsp(i,0) - (matVr(i,0)*matIr(i,0)+matVm(i,0)*matIm(i,0));
                matdelQ(i,0) = matQsp(i,0) - (matVm(i,0)*matIr(i,0)-matVr(i,0)*matIm(i,0));
            }
            matdelIr = matIr-matspIr;
            matdelIm = matIm-matspIm;
            fval[0] = 0;
            for(int i=1;i!=38;i++)
            {
                fval[0] += matdelP.real()(i,0)*matdelP.real()(i,0);
                fval[0] += matdelQ.real()(i,0)*matdelQ.real()(i,0);
                hval[i-1]  = matdelIr.real()(i,0);
                hval[i+36] = matdelIm.real()(i,0);
            }
            break;
        }
    case 42:
        {
            MatrixXcd matY(38,38);
            MatrixXcd matP(38,6);
            MatrixXcd matQ(38,6);
            MatrixXcd matV(38,1);
            MatrixXcd matVr(38,1);
            MatrixXcd matVm(38,1);
            MatrixXcd matPc(38,1);
            MatrixXcd matQc(38,1);
            MatrixXcd matPsp(38,1);
            MatrixXcd matQsp(38,1);
            MatrixXcd matI(38,1);
            MatrixXcd matIr(38,1);
            MatrixXcd matIm(38,1);
            MatrixXcd matspI(38,1);
            MatrixXcd matspIr(38,1);
            MatrixXcd matspIm(38,1);
            MatrixXcd matdelP(38,1);
            MatrixXcd matdelQ(38,1);
            MatrixXcd matdelIr(38,1);
            MatrixXcd matdelIm(38,1);
            for(int i=0;i!=38;i++)
            {
                for(int j=0;j!=6;j++)
                {
                    matP.real()(i,j) = FunctionPS2_P[i][j];
                    matQ.real()(i,j) = FunctionPS2_Q[i][j];
                    matP.imag()(i,j) = 0;
                    matQ.imag()(i,j) = 0;
                }
                matPc(i,0) = 0;
                matQc(i,0) = 0;
                matdelP.real()(i,0) = 0;
                matdelQ.real()(i,0) = 0;
                matdelP.imag()(i,0) = 0;
                matdelQ.imag()(i,0) = 0;
            }
            for(int i=1;i!=38;i++)
            {
                matV.real()(i) = xval[i-1];
                matV.imag()(i) = xval[i+36];
            }
            matPc(33) = xval[76];
            matPc(34) = xval[77];
            matPc(35) = xval[78];
            matPc(36) = xval[79];
            matPc(37) = xval[80];
            matQc(33) = xval[81];
            matQc(34) = xval[82];
            matQc(35) = xval[83];
            matQc(36) = xval[84];
            matQc(37) = xval[85];
            double w = xval[74];
            matV(0,0) = xval[75]+1e-5;
            VectorXcd mat_z(37);
            VectorXcd mat_y(37);
            for(int i=0;i!=37;i++)
            {
                mat_z.real()(i) = FunctionPS14_L[i][2];        // z matrix...
                mat_z.imag()(i) = FunctionPS14_L[i][3]*w;
                mat_y(i) = 1./mat_z(i);            // To get inverse of each element...
            }
            for(int m=0;m!=38;m++)
                for(int n=0;n!=38;n++)
                    matY(m,n) = 0;
            for(int i=0;i!=37;i++)
            {
                matY(int(FunctionPS14_L[i][0])-1,int(FunctionPS14_L[i][1])-1) = matY(int(FunctionPS14_L[i][0])-1,int(FunctionPS14_L[i][1])-1) - mat_y(i);// /a(k);
                matY(int(FunctionPS14_L[i][1])-1,int(FunctionPS14_L[i][0])-1) = matY(int(FunctionPS14_L[i][0])-1,int(FunctionPS14_L[i][1])-1);
            }
            for(int m=0;m!=38;m++)
            {
                for(int n=0;n!=37;n++)
                {
                    if(FunctionPS14_L[n][0]-1 == m)
                    {
                        matY(m,m) = matY(m,m) + mat_y(n); // /(a(n)^2) + b(n); - no effect
                    }
                    else if(FunctionPS14_L[n][1]-1 == m)
                    {
                        matY(m,m) = matY(m,m) + mat_y(n); //  + b(n); - no effect
                    }
                }
            }
            matI = matY*matV;
            matVr = matV.real();
            matVm = matV.imag();
            matIr = matI.real();
            matIm = matI.imag();
            for(int i=0;i!=38;i++)
            {
                matPsp(i,0) = matPc(i,0)*(1.-w)-matP(i,0)*pow((abs(matV(i,0))/matP(i,4)),matP(i,5));
                matQsp(i,0) = matQc(i,0)*(1.-sqrt(matVr(i,0)*matVr(i,0) + matVm(i,0)*matVm(i,0)))-matQ(i,0)*pow((abs(matV(i,0))/matQ(i,4)),matQ(i,5));
            }
            matspI.real() = matPsp.real();
            matspI.imag() = matQsp.real();
            for(int i=0;i!=38;i++)
            {
                matspI(i) = matspI(i)/matV(i);
                matspI.imag()(i) = -matspI.imag()(i);
            }
            matspIr = matspI.real();
            matspIm = matspI.imag();
            matdelIr = matIr-matspIr;
            matdelIm = matIm-matspIm;
            fval[0] = 0;
            for(int i=0;i!=38;i++)
            {
                fval[0] += real(matPsp(i,0));
                hval[i]  = matdelIr.real()(i,0);
                hval[i+38] = matdelIm.real()(i,0);
            }
            break;
        }
    case 43:
        {
            MatrixXcd matY(38,38);
            MatrixXcd matP(38,6);
            MatrixXcd matQ(38,6);
            MatrixXcd matV(38,1);
            MatrixXcd matVr(38,1);
            MatrixXcd matVm(38,1);
            MatrixXcd matPc(38,1);
            MatrixXcd matQc(38,1);
            MatrixXcd matPsp(38,1);
            MatrixXcd matQsp(38,1);
            MatrixXcd matI(38,1);
            MatrixXcd matIr(38,1);
            MatrixXcd matIm(38,1);
            MatrixXcd matspI(38,1);
            MatrixXcd matspIr(38,1);
            MatrixXcd matspIm(38,1);
            MatrixXcd matdelP(38,1);
            MatrixXcd matdelQ(38,1);
            MatrixXcd matdelIr(38,1);
            MatrixXcd matdelIm(38,1);
            for(int i=0;i!=38;i++)
            {
                for(int j=0;j!=6;j++)
                {
                    matP.real()(i,j) = FunctionPS2_P[i][j];
                    matQ.real()(i,j) = FunctionPS2_Q[i][j];
                    matP.imag()(i,j) = 0;
                    matQ.imag()(i,j) = 0;
                }
                matPc(i,0) = 0;
                matQc(i,0) = 0;
                matdelP.real()(i,0) = 0;
                matdelQ.real()(i,0) = 0;
                matdelP.imag()(i,0) = 0;
                matdelQ.imag()(i,0) = 0;
            }
            for(int i=1;i!=38;i++)
            {
                matV.real()(i) = xval[i-1];
                matV.imag()(i) = xval[i+36];
            }
            matPc(33) = xval[76];
            matPc(34) = xval[77];
            matPc(35) = xval[78];
            matPc(36) = xval[79];
            matPc(37) = xval[80];
            matQc(33) = xval[81];
            matQc(34) = xval[82];
            matQc(35) = xval[83];
            matQc(36) = xval[84];
            matQc(37) = xval[85];
            double w = xval[74];
            matV(0,0) = xval[75]+1e-5;
            VectorXcd mat_z(37);
            VectorXcd mat_y(37);
            for(int i=0;i!=37;i++)
            {
                mat_z.real()(i) = FunctionPS14_L[i][2];        // z matrix...
                mat_z.imag()(i) = FunctionPS14_L[i][3]*w;
                mat_y(i) = 1./mat_z(i);            // To get inverse of each element...
            }
            for(int m=0;m!=38;m++)
                for(int n=0;n!=38;n++)
                    matY(m,n) = 0;
            for(int i=0;i!=37;i++)
            {
                matY(int(FunctionPS14_L[i][0])-1,int(FunctionPS14_L[i][1])-1) = matY(int(FunctionPS14_L[i][0])-1,int(FunctionPS14_L[i][1])-1) - mat_y(i);// /a(k);
                matY(int(FunctionPS14_L[i][1])-1,int(FunctionPS14_L[i][0])-1) = matY(int(FunctionPS14_L[i][0])-1,int(FunctionPS14_L[i][1])-1);
            }
            for(int m=0;m!=38;m++)
            {
                for(int n=0;n!=37;n++)
                {
                    if(FunctionPS14_L[n][0]-1 == m)
                    {
                        matY(m,m) = matY(m,m) + mat_y(n); // /(a(n)^2) + b(n); - no effect
                    }
                    else if(FunctionPS14_L[n][1]-1 == m)
                    {
                        matY(m,m) = matY(m,m) + mat_y(n); //  + b(n); - no effect
                    }
                }
            }
            matI = matY*matV;
            matVr = matV.real();
            matVm = matV.imag();
            matIr = matI.real();
            matIm = matI.imag();
            for(int i=0;i!=38;i++)
            {
                matPsp(i,0) = matPc(i,0)*(1.-w)-matP(i,0)*pow((abs(matV(i,0))/matP(i,4)),matP(i,5));
                matQsp(i,0) = matQc(i,0)*(1.-sqrt(matVr(i,0)*matVr(i,0) + matVm(i,0)*matVm(i,0)))-matQ(i,0)*pow((abs(matV(i,0))/matQ(i,4)),matQ(i,5));
            }
            matspI.real() = matPsp.real();
            matspI.imag() = matQsp.real();
            for(int i=0;i!=38;i++)
            {
                matspI(i) = matspI(i)/matV(i);
                matspI.imag()(i) = -matspI.imag()(i);
            }
            matspIr = matspI.real();
            matspIm = matspI.imag();
            matdelIr = matIr-matspIr;
            matdelIm = matIm-matspIm;
            fval[0] = 0;
            for(int i=0;i!=38;i++)
            {
                fval[0] += 0.5*real(matPsp(i,0)+matQsp(i,0));
                hval[i]  = matdelIr.real()(i,0);
                hval[i+38] = matdelIm.real()(i,0);
            }
            break;
        }
    case 44:
        {
            //double interval      = 15;
            int    interval_num  = 24;
            //double cut_in_speed  = 3.5;
            double rated_speed   = 14;
            double cut_out_speed = 25;
            double R             = 40;
            double a             = 0.552786404500042;
            double kappa         = 0.01;
            int N             = 15;
            int n_ws = 35;//(rated_speed - cut_in_speed) / 0.3;
            double c[24] = {7, 5, 5, 5, 5, 4, 5, 6, 7, 7, 8, 9.5, 10, 8.5, 8.5, 6.5, 4.6, 2.6, 8, 5, 6.4, 5.2, 4.5, 3.9};
            double fre[24] = {0.0003, 0.0072, 0.0237, 0.0242, 0.0222, 0.0301, 0.0397, 0.0268, 0.0626, 0.0801, 0.1025, 0.1445, 0.1909, 0.1162, 0.0793, 0.0082, 0.0041, 0.0008,      0.0010, 0.0005, 0.0013, 0.0031, 0.0085, 0.0222};
            double vel_def;
            double interval_c;
            double all_power = 0;
            //double interval_dir[24] = {7.5, 22.5, 37.5, 52.5, 67.5, 82.5, 97.5, 112.5, 127.5, 142.5, 157.5, 172.5, 187.5, 202.5, 217.5, 232.5, 247.5, 262.5, 277.5, 292.5, 307.5, 322.5, 337.5, 352.5};
            double cos_int_dir[24] = {0.9914448613738107, 0.9238795325112893, 0.7933533402912419, 0.608761429008733, 0.3826834323651083, 0.1305261922200757, -0.130526192220023, -0.3826834323650591, -0.6087614290086908, -0.7933533402912096, -0.9238795325112691, -0.9914448613738037, -0.9914448613738176, -0.9238795325113096, -0.7933533402912744, -0.6087614290087752, -0.3826834323651576, -0.1305261922201282, 0.1305261922199702, 0.3826834323650104, 0.6087614290086487, 0.7933533402911771, 0.9238795325112488, 0.9914448613737968};
            double sin_int_dir[24] = {0.1305261922200494, 0.3826834323650837, 0.6087614290087119, 0.7933533402912257, 0.9238795325112791, 0.9914448613738073, 0.9914448613738142, 0.9238795325112994, 0.7933533402912581, 0.608761429008754, 0.3826834323651325, 0.1305261922201022, -0.1305261922199967, -0.3826834323650347, -0.6087614290086696, -0.7933533402911933, -0.9238795325112586, -0.9914448613738003, -0.9914448613738212, -0.9238795325113196, -0.7933533402912903, -0.6087614290087964, -0.3826834323651815, -0.1305261922201547};
            double sum_power_eva;
            double vel_def_i;
            double Tijx;
            double Tijy;
            double dij;
            double lij;
            double l;
            double def;
            double v_j_1[35] = {3.5, 3.8, 4.1, 4.4, 4.7, 5, 5.3, 5.6, 5.9, 6.2, 6.5, 6.8, 7.1, 7.4, 7.7, 8, 8.3, 8.6, 8.9, 9.2, 9.5, 9.8, 10.1, 10.4, 10.7, 11, 11.3, 11.6, 11.9, 12.2, 12.5, 12.8, 13.1, 13.4, 13.7};
            double v_j[35] = {3.8, 4.1, 4.4, 4.7, 5, 5.3, 5.6, 5.9, 6.2, 6.5, 6.8, 7.1, 7.4, 7.7, 8, 8.3, 8.6, 8.9, 9.2, 9.5, 9.8, 10.1, 10.4, 10.7, 11, 11.3, 11.6, 11.9, 12.2, 12.5, 12.8, 13.1, 13.4, 13.7, 14};
            double expvij[35] = {0.004237910962011252, 0.005712112257595088, 0.007695166767237874, 0.01035949856792283, 0.01393336084297297, 0.0187168307495274, 0.02510071314033948, 0.03358746349372842, 0.04481175630162718, 0.05955584011356754, 0.07875110661481384, 0.1034525735387825, 0.1347685812864232, 0.1737273177210005, 0.2210706676399201, 0.2769907482835349, 0.3408658880241205, 0.4110956382974272, 0.4851448950578823, 0.5598521622591052, 0.6319431639391475, 0.6985835849328036, 0.7577828240094765, 0.8085416788267814, 0.8507584469624261, 0.8849904909134705, 0.9121811225963482, 0.9334269016869262, 0.9498155260465481, 0.9623324897131935, 0.9718201093217946, 0.9789702280848606, 0.9843353812560659, 0.9883480583204887, 0.9913418820325199};
            for(int k=0;k!=interval_num;k++)
            {
                sum_power_eva = 0;
                for(int i=0;i!=N;i++)
                {
                    vel_def_i = 0;
                    for(int j=0;j!=N;j++)
                    {
                        if(j != i)
                        {
                            Tijx = (xval[2*i] - xval[2*j]);
                            Tijy = (xval[2*i+1] - xval[2*j+1]);
                            dij = cos_int_dir[k] * Tijx + sin_int_dir[k] * Tijy;
                            lij = sqrt((Tijx*Tijx + Tijy*Tijy) - (dij*dij));
                            l = dij * kappa + R;
                            if((l > lij-R) && (dij > 0))
                            {
                                def = a / ((1. + kappa * dij / R)*(1. + kappa * dij / R));
                                vel_def_i = vel_def_i + def*def;
                            }
                        }
                    }
                    vel_def = sqrt(vel_def_i);
                    interval_c = c[k] * (1. - vel_def);
                    for(int j=0;j!=n_ws;j++)
                    {
                        sum_power_eva += expvij[j] * (exp(-(v_j_1[j] / interval_c)*(v_j_1[j] / interval_c)) - exp(-(v_j[j] / interval_c)*(v_j[j] / interval_c)));
                    }
                    sum_power_eva += (exp(-(rated_speed / interval_c)*(rated_speed / interval_c)) - exp(-(cut_out_speed / interval_c)*(cut_out_speed / interval_c)));
                }
                all_power = all_power + fre[k] * 1500. *sum_power_eva;
            }
            fval[0] = -all_power;
            int k2 = 0;
            for(int i=0;i!=N;i++)
            {
                for(int j=i+1;j<N-1;j++)
                {
                   gval[k2] = 5.*R - sqrt((xval[2*i]-xval[2*j])*(xval[2*i]-xval[2*j])+(xval[2*i+1]-xval[2*j+1])*(xval[2*i+1]-xval[2*j+1]));
                   k2++;
                }
            }
            break;
        }
    case 45:
        {
            double k[31] = {5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49,53,55,59,61,65,67,71,73,77,79,83,85,91,95,97};
            double su = 0;
            for(int j=0;j<31;j++)
            {
                double su2 = 0;
                for(int l=0;l<25;l++)
                    su2 = su2 - ((l%2)*2-1)*cos(k[j]*xval[l]*0.017453292519943);
                su = su + su2*su2/(k[j]*k[j]*k[j]*k[j]);
            }
            fval[0] = sqrt(su)/0.046379004026583;
            hval[0] = 0;
            for(int i=0;i!=24;i++)
            {
                gval[i] = xval[i]-xval[i+1]+1e-6;
                hval[0] += -((i%2)*2-1)*cos(xval[i]*0.017453292519943);
            }
            hval[0] += cos(xval[24]*0.017453292519943)-0.32;
            break;
        }
    case 46:
        {
            double s[25] = {1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,1,1,-1};
            double k[31] = {5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49,53,55,59,61,65,67,71,73,77,79,83,85,91,95,97};
            double su = 0;
            for(int j=0;j<31;j++)
            {
                double su2 = 0;
                for(int l=0;l<25;l++)
                    su2 = su2 + s[l]*cos(k[j]*xval[l]*0.017453292519943);
                su = su + su2*su2/(k[j]*k[j]*k[j]*k[j]);
            }
            fval[0] = 0.5*sqrt(su)/0.046379004026583;
            hval[0] = 0;
            for(int i=0;i!=24;i++)
            {
                gval[i] = xval[i]-xval[i+1]+1e-6;
                hval[0] += s[i]*cos(xval[i]*0.017453292519943);
            }
            hval[0] += s[24]*cos(xval[24]*0.017453292519943)-0.64;
            break;
        }
    case 47:
        {
            double s[25] = {1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,1,1,1};
            double k[31] = {5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49,53,55,59,61,65,67,71,73,77,79,83,85,91,95,97};
            double su = 0;
            for(int j=0;j<31;j++)
            {
                double su2 = 0;
                for(int l=0;l<25;l++)
                    su2 = su2 + s[l]*cos(k[j]*xval[l]*0.017453292519943);
                su = su + su2*su2/(k[j]*k[j]*k[j]*k[j]);
            }
            fval[0] = sqrt(su)/0.046379004026583/3.;
            hval[0] = 0;
            for(int i=0;i!=24;i++)
            {
                gval[i] = xval[i]-xval[i+1]+1e-6;
                hval[0] += s[i]*cos(xval[i]*0.017453292519943);
            }
            hval[0] += s[24]*cos(xval[24]*0.017453292519943)-1.08;
            break;
        }
    case 48:
        {
            double s[30] = {1,1,1,1,-1,1,-1,-1,-1,1,-1,-1,1,1,1,1,-1,1,-1,-1,-1,1,-1,-1,1,1,1,1,-1,1};
            double k[31] = {5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49,53,55,59,61,65,67,71,73,77,79,83,85,91,95,97};
            double su = 0;
            for(int j=0;j<31;j++)
            {
                double su2 = 0;
                for(int l=0;l<30;l++)
                    su2 = su2 + s[l]*cos(k[j]*xval[l]*0.017453292519943);
                su = su + su2*su2/(k[j]*k[j]*k[j]*k[j]);
            }
            fval[0] = sqrt(su)/0.046379004026583*0.25;
            hval[0] = 0;
            for(int i=0;i!=29;i++)
            {
                gval[i] = xval[i]-xval[i+1]+1e-6;
                hval[0] += s[i]*cos(xval[i]*0.017453292519943);
            }
            hval[0] += s[29]*cos(xval[29]*0.017453292519943)-1.28;
            break;
        }
    case 49:
        {
            double s[30] = {1,-1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,-1,-1};
            double k[31] = {5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49,53,55,59,61,65,67,71,73,77,79,83,85,91,95,97};
            double su = 0;
            for(int j=0;j<31;j++)
            {
                double su2 = 0;
                for(int l=0;l<30;l++)
                    su2 = su2 + s[l]*cos(k[j]*xval[l]*0.017453292519943);
                su = su + su2*su2/(k[j]*k[j]*k[j]*k[j]);
            }
            fval[0] = sqrt(su)/0.046379004026583*0.2;
            hval[0] = 0;
            for(int i=0;i!=29;i++)
            {
                gval[i] = xval[i]-xval[i+1]+1e-6;
                hval[0] += s[i]*cos(xval[i]*0.017453292519943);
            }
            hval[0] += s[29]*cos(xval[29]*0.017453292519943)-1.6665;
            break;
        }
    case 50:
        {
            double s[30] = {1,1,1,-1,1,-1,1,-1,1,1,1,1,-1,-1,-1,-1,1,-1,1,-1,1,1,1,1,-1,-1,-1,1,-1,1};
            double k[31] = {5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49,53,55,59,61,65,67,71,73,77,79,83,85,91,95,97};
            double su = 0;
            for(int j=0;j<31;j++)
            {
                double su2 = 0;
                for(int l=0;l<30;l++)
                    su2 = su2 + s[l]*cos(k[j]*xval[l]*0.017453292519943);
                su = su + su2*su2/(k[j]*k[j]*k[j]*k[j]);
            }
            fval[0] = sqrt(su)/0.046379004026583/6.;
            hval[0] = 0;
            for(int i=0;i!=29;i++)
            {
                gval[i] = xval[i]-xval[i+1]+1e-6;
                hval[0] += s[i]*cos(xval[i]*0.017453292519943);
            }
            hval[0] += s[29]*cos(xval[29]*0.017453292519943)-1.92;
            break;
        }
    case 51:
        {
            fval[0] = 0;
            for(int i=0;i!=14;i++)
            {
                gval[i] = 0;
            }
            hval[0] = 0;
            double sum_xval = 0;
            for(int i=0;i!=59;i++)
            {
                sum_xval += xval[i];
                fval[0] += xval[i]*FunctionRM_feed[0][i];
                gval[0] -= xval[i]*FunctionRM_feed[4][i];
                gval[1] += xval[i]*FunctionRM_feed[4][i];
                gval[2] -= xval[i]*FunctionRM_feed[3][i];
                gval[3] += xval[i]*FunctionRM_feed[3][i];
                gval[4] -= xval[i]*FunctionRM_feed[5][i];
                gval[5] += xval[i]*FunctionRM_feed[5][i];
                gval[6] -= xval[i]*FunctionRM_feed[6][i];
                gval[7] += xval[i]*FunctionRM_feed[6][i];
                gval[10]-= xval[i]*FunctionRM_feed[2][i];
                gval[11]+= xval[i]*FunctionRM_feed[2][i];
                hval[0] += xval[i]*FunctionRM_feed[1][i];
            }
            for(int i=0;i!=17;i++)
            {
                gval[8] -= xval[i];
                gval[9] += xval[i];
            }
            for(int i=33;i!=59;i++)
            {
                gval[12] -= xval[i];
                gval[13] += xval[i];
            }
            gval[0] += 1.09;
            gval[1] -= 2.17;
            gval[2] += 4.87;
            gval[3] -= 5.2;
            gval[4] += 0.043;
            gval[5] -= 0.086;
            gval[6] += 0.023;
            gval[7] -= 0.046;
            gval[8] = gval[8] / sum_xval + 0.295;
            gval[9] = gval[9] / sum_xval - 0.36;
            gval[10] = gval[10] / sum_xval + 0.3;
            gval[11] = gval[11] / sum_xval - 0.4712;
            gval[12] += 9.2;
            gval[13] -= 11.5;
            hval[0] -= 6.9;
            break;
        }
    case 52:
        {
            fval[0] = 0;
            for(int i=0;i!=14;i++)
            {
                gval[i] = 0;
            }
            hval[0] = 0;
            double sum_xval = 0;
            for(int i=0;i!=59;i++)
            {
                sum_xval += xval[i];
                fval[0] += xval[i]*FunctionRM_feed[0][i];
                gval[0] -= xval[i]*FunctionRM_feed[4][i];
                gval[1] += xval[i]*FunctionRM_feed[4][i];
                gval[2] -= xval[i]*FunctionRM_feed[3][i];
                gval[3] += xval[i]*FunctionRM_feed[3][i];
                gval[4] -= xval[i]*FunctionRM_feed[5][i];
                gval[5] += xval[i]*FunctionRM_feed[5][i];
                gval[6] -= xval[i]*FunctionRM_feed[6][i];
                gval[7] += xval[i]*FunctionRM_feed[6][i];
                gval[10]-= xval[i]*FunctionRM_feed[2][i];
                gval[11]+= xval[i]*FunctionRM_feed[2][i];
                hval[0] += xval[i]*FunctionRM_feed[1][i];
            }
            for(int i=0;i!=17;i++)
            {
                gval[8] -= xval[i];
                gval[9] += xval[i];
            }
            for(int i=33;i!=59;i++)
            {
                gval[12] -= xval[i];
                gval[13] += xval[i];
            }
            gval[0] += 1.28;
            gval[1] -= 2.56;
            gval[2] += 7.3;
            gval[3] -= 7.81;
            gval[4] += 0.005;
            gval[5] -= 0.094;
            gval[6] += 0.031;
            gval[7] -= 0.062;
            gval[8] = gval[8] / sum_xval + 0.2;
            gval[9] = gval[9] / sum_xval - 0.24;
            gval[10] = gval[10] / sum_xval + 0.3;
            gval[11] = gval[11] / sum_xval - 0.4;
            gval[12] += 9.8;
            gval[13] -= 16.4;
            hval[0] -= 9.8;
            break;
        }
    case 53:
        {
            fval[0] = 0;
            for(int i=0;i!=14;i++)
            {
                gval[i] = 0;
            }
            hval[0] = 0;
            double sum_xval = 0;
            for(int i=0;i!=59;i++)
            {
                sum_xval += xval[i];
                fval[0] += xval[i]*FunctionRM_feed[0][i];
                gval[0] -= xval[i]*FunctionRM_feed[4][i];
                gval[1] += xval[i]*FunctionRM_feed[4][i];
                gval[2] -= xval[i]*FunctionRM_feed[3][i];
                gval[3] += xval[i]*FunctionRM_feed[3][i];
                gval[4] -= xval[i]*FunctionRM_feed[5][i];
                gval[5] += xval[i]*FunctionRM_feed[5][i];
                gval[6] -= xval[i]*FunctionRM_feed[6][i];
                gval[7] += xval[i]*FunctionRM_feed[6][i];
                gval[10]-= xval[i]*FunctionRM_feed[2][i];
                gval[11]+= xval[i]*FunctionRM_feed[2][i];
                hval[0] += xval[i]*FunctionRM_feed[1][i];
            }
            for(int i=0;i!=17;i++)
            {
                gval[8] -= xval[i];
                gval[9] += xval[i];
            }
            for(int i=33;i!=59;i++)
            {
                gval[12] -= xval[i];
                gval[13] += xval[i];
            }
            gval[0] += 1.17;
            gval[1] -= 2.34;
            gval[2] += 6.94;
            gval[3] -= 7.43;
            gval[4] += 0.038;
            gval[5] -= 0.076;
            gval[6] += 0.034;
            gval[7] -= 0.068;
            gval[8] = gval[8] / sum_xval + 0.085;
            gval[9] = gval[9] / sum_xval - 0.111;
            gval[10] = gval[10] / sum_xval + 0.25;
            gval[11] = gval[11] / sum_xval - 0.4;
            gval[12] += 11.6;
            gval[13] -= 14.5;
            hval[0] -= 8.7;
            break;
        }
    case 54:
        {
            fval[0] = 0;
            for(int i=0;i!=14;i++)
            {
                gval[i] = 0;
            }
            hval[0] = 0;
            double sum_xval = 0;
            for(int i=0;i!=59;i++)
            {
                sum_xval += xval[i];
                fval[0] += xval[i]*FunctionRM_feed[0][i];
                gval[0] -= xval[i]*FunctionRM_feed[4][i];
                gval[1] += xval[i]*FunctionRM_feed[4][i];
                gval[2] -= xval[i]*FunctionRM_feed[3][i];
                gval[3] += xval[i]*FunctionRM_feed[3][i];
                gval[4] -= xval[i]*FunctionRM_feed[5][i];
                gval[5] += xval[i]*FunctionRM_feed[5][i];
                gval[6] -= xval[i]*FunctionRM_feed[6][i];
                gval[7] += xval[i]*FunctionRM_feed[6][i];
                gval[10]-= xval[i]*FunctionRM_feed[2][i];
                gval[11]+= xval[i]*FunctionRM_feed[2][i];
                hval[0] += xval[i]*FunctionRM_feed[1][i];
            }
            for(int i=0;i!=17;i++)
            {
                gval[8] -= xval[i];
                gval[9] += xval[i];
            }
            for(int i=33;i!=59;i++)
            {
                gval[12] -= xval[i];
                gval[13] += xval[i];
            }
            gval[0] += 0.56;
            gval[1] -= 1.12;
            gval[2] += 3.23;
            gval[3] -= 3.46;
            gval[4] += 0.018;
            gval[5] -= 0.036;
            gval[6] += 0.0116;
            gval[7] -= 0.04;
            gval[8] = gval[8] / sum_xval + 0.25;
            gval[9] = gval[9] / sum_xval - 0.9;
            gval[10] = gval[10] / sum_xval + 0.3;
            gval[11] = gval[11] / sum_xval - 0.4384;
            gval[12] += 7.47;
            gval[13] -= 9.34;
            hval[0] -= 5.6;
            break;
        }
    case 55:
        {
            fval[0] = 0;
            for(int i=0;i!=6;i++)
            {
                hval[i] = 0;
            }
            for(int i=0;i!=64;i++)
            {
                fval[0] += xval[i]*FunctionRM_diary[0][i];
                hval[0] += xval[i]*FunctionRM_diary[11][i];
                hval[1] += xval[i]*FunctionRM_diary[1][i];
                hval[2] += xval[i]*FunctionRM_diary[2][i];
                hval[3] += xval[i]*FunctionRM_diary[12][i];
                hval[4] += xval[i]*FunctionRM_diary[13][i];
                double sum_1_10 = 0;
                for(int j=0;j!=10;j++)
                {
                    sum_1_10 += FunctionRM_diary[j+1][i];
                }
                hval[5] += xval[i]*sum_1_10;
            }
            hval[0] -= 25.67;
            hval[1] -= 0.0218;
            hval[2] -= 0.062;
            hval[3] -= 0.034;
            hval[4] -= 0.021;
            hval[5] -= 0.999;
            break;
        }
    case 56:
        {
            fval[0] = 0;
            for(int i=0;i!=6;i++)
            {
                hval[i] = 0;
            }
            for(int i=0;i!=64;i++)
            {
                fval[0] += xval[i]*FunctionRM_diary[0][i];
                hval[0] += xval[i]*FunctionRM_diary[11][i];
                hval[1] += xval[i]*FunctionRM_diary[1][i];
                hval[2] += xval[i]*FunctionRM_diary[2][i];
                hval[3] += xval[i]*FunctionRM_diary[12][i];
                hval[4] += xval[i]*FunctionRM_diary[13][i];
                double sum_1_10 = 0;
                for(int j=0;j!=10;j++)
                {
                    sum_1_10 += FunctionRM_diary[j+1][i];
                }
                hval[5] += xval[i]*sum_1_10;
            }
            hval[0] -= 65.24;
            hval[1] -= 0.066;
            hval[2] -= 0.159;
            hval[3] -= 0.103;
            hval[4] -= 0.052;
            hval[5] -= 2.644;
            break;
        }
    case 57:
        {
            fval[0] = 0;
            for(int i=0;i!=6;i++)
            {
                hval[i] = 0;
            }
            for(int i=0;i!=64;i++)
            {
                fval[0] += xval[i]*FunctionRM_diary[0][i];
                hval[0] += xval[i]*FunctionRM_diary[11][i];
                hval[1] += xval[i]*FunctionRM_diary[1][i];
                hval[2] += xval[i]*FunctionRM_diary[2][i];
                hval[3] += xval[i]*FunctionRM_diary[12][i];
                hval[4] += xval[i]*FunctionRM_diary[13][i];
                double sum_1_10 = 0;
                for(int j=0;j!=10;j++)
                {
                    sum_1_10 += FunctionRM_diary[j+1][i];
                }
                hval[5] += xval[i]*sum_1_10;
            }
            hval[0] -= 30.05;
            hval[1] -= 0.0259;
            hval[2] -= 0.077;
            hval[3] -= 0.096;
            hval[4] -= 0.025;
            hval[5] -= 1.214;
            break;
        }
    default:
        {
            cout<<"Wrong function number!"<<endl;
            fval[0] = 0;
        }
    }
}
